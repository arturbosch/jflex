// DO NOT EDIT
// Generated by JFlex 1.8.2 http://jflex.de/
// source: jflex/src/main/jflex/LexScan.flex

/*
 * Copyright (C) 1998-2018  Gerwin Klein <lsf@jflex.de>
 * SPDX-License-Identifier: BSD-3-Clause
 */

package jflex.core;

import java_cup.runtime.Symbol;
import java.io.File;
import java.io.IOException;
import java.nio.file.Files;
import jflex.core.unicode.IntCharSet;
import jflex.l10n.ErrorMessages;
import jflex.logging.Out;
import jflex.option.Options;
import jflex.performance.Timer;
import jflex.scanner.ScannerException;
import jflex.skeleton.Skeleton;


// See https://github.com/jflex-de/jflex/issues/222
@SuppressWarnings("FallThrough")
public final class LexScan extends AbstractLexScan implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int COMMENT = 2;
  public static final int STATELIST = 4;
  public static final int MACROS = 6;
  public static final int REGEXPSTART = 8;
  public static final int REGEXP = 10;
  public static final int JAVA_CODE = 12;
  public static final int STATES = 14;
  public static final int STRING_CONTENT = 16;
  public static final int CHARCLASS = 18;
  public static final int COPY = 20;
  public static final int REPEATEXP = 22;
  public static final int EATWSPNL = 24;
  public static final int CTOR_ARG = 26;
  public static final int REGEXP_CODEPOINT_SEQUENCE = 28;
  public static final int STRING_CODEPOINT_SEQUENCE = 30;
  public static final int CHARCLASS_CODEPOINT = 32;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1,  1,  2,  2,  3,  4,  5,  6,  7,  7,  8,  8,  9,  9, 
    10, 10, 11, 11, 12, 12, 13, 13, 14, 14, 15, 15, 16, 16, 17, 17, 
    18, 18
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\1\u0100\1\u0200\1\u0300\1\u0400\1\u0500\1\u0600\1\u0700"+
    "\1\u0800\1\u0900\1\u0a00\1\u0b00\1\u0c00\1\u0d00\1\u0e00\1\u0f00"+
    "\1\u1000\1\u0100\1\u1100\1\u1200\1\u1300\1\u0100\1\u1400\1\u1500"+
    "\1\u1600\1\u1700\1\u1800\1\u1900\1\u1a00\1\u1b00\1\u0100\1\u1c00"+
    "\1\u1d00\1\u1e00\12\u1f00\1\u2000\1\u2100\1\u2200\1\u1f00\1\u2300"+
    "\1\u2400\2\u1f00\31\u0100\1\u2500\121\u0100\1\u2600\4\u0100\1\u2700"+
    "\1\u0100\1\u2800\1\u2900\1\u2a00\1\u2b00\1\u2c00\1\u2d00\53\u0100"+
    "\1\u2e00\10\u2f00\31\u1f00\1\u0100\1\u3000\1\u3100\1\u0100\1\u3200"+
    "\1\u3300\1\u3400\1\u3500\1\u3600\1\u3700\1\u3800\1\u3900\1\u3a00"+
    "\1\u0100\1\u3b00\1\u3c00\1\u3d00\1\u3e00\1\u3f00\1\u4000\3\u1f00"+
    "\1\u4100\1\u4200\1\u4300\1\u4400\1\u4500\1\u4600\1\u4700\1\u4800"+
    "\1\u4900\1\u1f00\1\u4a00\1\u1f00\1\u4b00\1\u4c00\2\u1f00\3\u0100"+
    "\1\u4d00\1\u4e00\1\u4f00\12\u1f00\4\u0100\1\u5000\17\u1f00\2\u0100"+
    "\1\u5100\41\u1f00\2\u0100\1\u5200\1\u5300\3\u1f00\1\u5400\27\u0100"+
    "\1\u5500\2\u0100\1\u5600\45\u1f00\1\u0100\1\u5700\1\u5800\11\u1f00"+
    "\1\u5900\24\u1f00\1\u5a00\1\u5b00\1\u1f00\1\u5c00\1\u5d00\1\u5e00"+
    "\1\u5f00\2\u1f00\1\u6000\5\u1f00\1\u6100\7\u1f00\1\u6200\1\u6300"+
    "\4\u1f00\1\u6400\21\u1f00\246\u0100\1\u6500\20\u0100\1\u6600\1\u6700"+
    "\25\u0100\1\u6800\34\u0100\1\u6900\14\u1f00\2\u0100\1\u6a00\u0b05\u1f00"+
    "\1\u6b00\1\u6c00\u02fe\u1f00";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\10\0\1\1\1\2\1\3\2\4\1\5\16\0\4\6"+
    "\1\2\1\7\1\10\1\6\1\11\1\12\1\13\1\14"+
    "\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24"+
    "\1\25\1\26\1\27\1\30\2\31\1\32\1\33\1\34"+
    "\1\35\1\36\1\6\1\37\1\40\1\41\1\42\1\6"+
    "\3\43\1\44\1\45\1\46\10\47\1\50\1\51\1\47"+
    "\1\52\1\53\1\47\1\54\1\47\1\55\3\47\1\56"+
    "\1\57\1\60\1\61\1\62\1\6\1\63\1\64\1\65"+
    "\1\66\1\67\1\70\1\71\1\72\1\73\1\74\1\75"+
    "\1\76\1\77\1\100\1\101\1\102\1\47\1\103\1\104"+
    "\1\105\1\106\1\107\1\110\1\111\1\112\1\47\1\113"+
    "\1\114\1\115\1\116\6\0\1\117\32\0\2\6\4\120"+
    "\4\6\1\120\2\6\1\0\7\6\1\120\4\6\1\120"+
    "\5\6\27\120\1\6\37\120\1\6\u01ca\120\4\6\14\120"+
    "\16\6\5\120\7\6\1\120\1\6\1\120\21\6\160\0"+
    "\5\120\1\6\2\120\2\6\4\120\1\6\1\120\6\6"+
    "\1\120\1\6\3\120\1\6\1\120\1\6\24\120\1\6"+
    "\123\120\1\6\213\120\1\6\5\0\2\6\246\120\1\6"+
    "\46\120\2\6\1\120\7\6\47\120\7\6\1\120\1\6"+
    "\55\0\1\6\1\0\1\6\2\0\1\6\2\0\1\6"+
    "\1\0\10\6\33\120\5\6\3\120\15\6\6\0\5\6"+
    "\1\120\4\6\13\0\1\6\1\0\3\6\53\120\37\0"+
    "\4\6\2\120\1\0\143\120\1\6\1\120\10\0\1\6"+
    "\6\0\2\120\2\0\1\6\4\0\2\120\12\0\3\120"+
    "\2\6\1\120\17\6\1\0\1\120\1\0\36\120\33\0"+
    "\2\6\131\120\13\0\1\120\16\6\12\0\41\120\11\0"+
    "\2\120\4\6\1\120\5\6\26\120\4\0\1\120\11\0"+
    "\1\120\3\0\1\120\5\0\22\6\31\120\3\0\4\6"+
    "\13\120\65\6\25\120\1\6\10\120\26\6\60\0\66\120"+
    "\3\0\1\120\22\0\1\120\7\0\12\120\2\0\2\6"+
    "\12\0\1\6\20\120\3\0\1\6\10\120\2\6\2\120"+
    "\2\6\26\120\1\6\7\120\1\6\1\120\3\6\4\120"+
    "\2\6\1\0\1\120\7\0\2\6\2\0\2\6\3\0"+
    "\1\120\10\6\1\0\4\6\2\120\1\6\3\120\2\0"+
    "\2\6\12\0\4\120\7\6\2\120\4\6\3\0\1\6"+
    "\6\120\4\6\2\120\2\6\26\120\1\6\7\120\1\6"+
    "\2\120\1\6\2\120\1\6\2\120\2\6\1\0\1\6"+
    "\5\0\4\6\2\0\2\6\3\0\3\6\1\0\7\6"+
    "\4\120\1\6\1\120\7\6\14\0\3\120\1\0\13\6"+
    "\3\0\1\6\11\120\1\6\3\120\1\6\26\120\1\6"+
    "\7\120\1\6\2\120\1\6\5\120\2\6\1\0\1\120"+
    "\10\0\1\6\3\0\1\6\3\0\2\6\1\120\17\6"+
    "\2\120\2\0\2\6\12\0\1\6\1\120\7\6\1\120"+
    "\6\0\1\6\3\0\1\6\10\120\2\6\2\120\2\6"+
    "\26\120\1\6\7\120\1\6\2\120\1\6\5\120\2\6"+
    "\1\0\1\120\7\0\2\6\2\0\2\6\3\0\10\6"+
    "\2\0\4\6\2\120\1\6\3\120\2\0\2\6\12\0"+
    "\1\6\1\120\20\6\1\0\1\120\1\6\6\120\3\6"+
    "\3\120\1\6\4\120\3\6\2\120\1\6\1\120\1\6"+
    "\2\120\3\6\2\120\3\6\3\120\3\6\14\120\4\6"+
    "\5\0\3\6\3\0\1\6\4\0\2\6\1\120\6\6"+
    "\1\0\16\6\12\0\11\6\1\120\6\6\4\0\1\6"+
    "\10\120\1\6\3\120\1\6\27\120\1\6\20\120\3\6"+
    "\1\120\7\0\1\6\3\0\1\6\4\0\7\6\2\0"+
    "\1\6\3\120\5\6\2\120\2\0\2\6\12\0\20\6"+
    "\1\120\3\0\1\6\10\120\1\6\3\120\1\6\27\120"+
    "\1\6\12\120\1\6\5\120\2\6\1\0\1\120\7\0"+
    "\1\6\3\0\1\6\4\0\7\6\2\0\7\6\1\120"+
    "\1\6\2\120\2\0\2\6\12\0\1\6\2\120\15\6"+
    "\4\0\1\6\10\120\1\6\3\120\1\6\51\120\2\0"+
    "\1\120\7\0\1\6\3\0\1\6\4\0\1\120\5\6"+
    "\3\120\1\0\7\6\3\120\2\0\2\6\12\0\12\6"+
    "\6\120\2\6\2\0\1\6\22\120\3\6\30\120\1\6"+
    "\11\120\1\6\1\120\2\6\7\120\3\6\1\0\4\6"+
    "\6\0\1\6\1\0\1\6\10\0\6\6\12\0\2\6"+
    "\2\0\15\6\60\120\1\0\2\120\7\0\4\6\10\120"+
    "\10\0\1\6\12\0\47\6\2\120\1\6\1\120\2\6"+
    "\2\120\1\6\1\120\2\6\1\120\6\6\4\120\1\6"+
    "\7\120\1\6\3\120\1\6\1\120\1\6\1\120\2\6"+
    "\2\120\1\6\4\120\1\0\2\120\6\0\1\6\2\0"+
    "\1\120\2\6\5\120\1\6\1\120\1\6\6\0\2\6"+
    "\12\0\2\6\4\120\40\6\1\120\27\6\2\0\6\6"+
    "\12\0\13\6\1\0\1\6\1\0\1\6\1\0\4\6"+
    "\2\0\10\120\1\6\44\120\4\6\24\0\1\6\2\0"+
    "\5\120\13\0\1\6\44\0\11\6\1\0\71\6\53\120"+
    "\24\0\1\120\12\0\6\6\6\120\4\0\4\120\3\0"+
    "\1\120\3\0\2\120\7\0\3\120\4\0\15\120\14\0"+
    "\1\120\17\0\2\6\46\120\1\6\1\120\5\6\1\120"+
    "\2\6\53\120\1\6\115\120\1\6\4\120\2\6\7\120"+
    "\1\6\1\120\1\6\4\120\2\6\51\120\1\6\4\120"+
    "\2\6\41\120\1\6\4\120\2\6\7\120\1\6\1\120"+
    "\1\6\4\120\2\6\17\120\1\6\71\120\1\6\4\120"+
    "\2\6\103\120\2\6\3\0\40\6\20\120\20\6\126\120"+
    "\2\6\6\120\3\6\u016c\120\2\6\21\120\1\6\32\120"+
    "\5\6\113\120\3\6\13\120\7\6\15\120\1\6\4\120"+
    "\3\0\13\6\22\120\3\0\13\6\22\120\2\0\14\6"+
    "\15\120\1\6\3\120\1\6\2\0\14\6\64\120\40\0"+
    "\3\6\1\120\3\6\2\120\1\0\2\6\12\0\41\6"+
    "\4\0\1\6\12\0\6\6\130\120\10\6\5\120\2\0"+
    "\42\120\1\0\1\120\5\6\106\120\12\6\37\120\1\6"+
    "\14\0\4\6\14\0\12\6\12\0\36\120\2\6\5\120"+
    "\13\6\54\120\4\6\32\120\6\6\12\0\46\6\27\120"+
    "\5\0\4\6\65\120\12\0\1\6\35\0\2\6\13\0"+
    "\6\6\12\0\15\6\1\120\10\6\16\0\102\6\5\0"+
    "\57\120\21\0\7\120\4\6\12\0\21\6\11\0\14\6"+
    "\3\0\36\120\15\0\2\120\12\0\54\120\16\0\14\6"+
    "\44\120\24\0\10\6\12\0\3\6\3\120\12\0\44\120"+
    "\2\6\11\120\107\6\3\0\1\6\25\0\4\120\1\0"+
    "\4\120\3\0\2\120\3\0\6\6\300\120\72\0\1\6"+
    "\5\0\26\120\2\6\6\120\2\6\46\120\2\6\6\120"+
    "\2\6\10\120\1\6\1\120\1\6\1\120\1\6\1\120"+
    "\1\6\37\120\2\6\65\120\1\6\7\120\1\6\1\120"+
    "\3\6\3\120\1\6\7\120\3\6\4\120\2\6\6\120"+
    "\4\6\15\120\5\6\3\120\1\6\7\120\16\6\5\0"+
    "\30\6\2\4\5\0\20\6\2\120\23\6\1\120\13\6"+
    "\5\0\1\6\12\0\1\6\1\120\15\6\1\120\20\6"+
    "\15\120\3\6\40\120\20\6\15\0\4\6\1\0\3\6"+
    "\14\0\21\6\1\120\4\6\1\120\2\6\12\120\1\6"+
    "\1\120\3\6\5\120\6\6\1\120\1\6\1\120\1\6"+
    "\1\120\1\6\4\120\1\6\13\120\2\6\4\120\5\6"+
    "\5\120\4\6\1\120\21\6\51\120\u0177\6\57\120\1\6"+
    "\57\120\1\6\205\120\6\6\4\120\3\0\2\120\14\6"+
    "\46\120\1\6\1\120\5\6\1\120\2\6\70\120\7\6"+
    "\1\120\17\6\1\0\27\120\11\6\7\120\1\6\7\120"+
    "\1\6\7\120\1\6\7\120\1\6\7\120\1\6\7\120"+
    "\1\6\7\120\1\6\7\120\1\6\40\0\57\6\1\120"+
    "\325\6\3\120\31\6\11\120\6\0\1\6\5\120\2\6"+
    "\5\120\4\6\126\120\2\6\2\0\2\6\3\120\1\6"+
    "\132\120\1\6\4\120\5\6\52\120\2\6\136\120\21\6"+
    "\33\120\65\6\306\120\112\6\353\120\25\6\215\120\103\6"+
    "\56\120\2\6\15\120\3\6\20\120\12\0\2\120\24\6"+
    "\57\120\1\0\4\6\12\0\1\6\37\120\2\0\120\120"+
    "\2\0\45\6\11\120\2\6\147\120\2\6\44\120\1\6"+
    "\10\120\77\6\13\120\1\0\3\120\1\0\4\120\1\0"+
    "\27\120\5\0\20\6\1\120\7\6\64\120\14\6\2\0"+
    "\62\120\22\0\12\6\12\0\6\6\22\0\6\120\3\6"+
    "\1\120\1\6\1\120\2\6\12\0\34\120\10\0\2\6"+
    "\27\120\15\0\14\6\35\120\3\6\4\0\57\120\16\0"+
    "\16\6\1\120\12\0\6\6\5\120\1\0\12\120\12\0"+
    "\5\120\1\6\51\120\16\0\11\6\3\120\1\0\10\120"+
    "\2\0\2\6\12\0\6\6\27\120\3\6\1\120\3\0"+
    "\62\120\1\0\1\120\3\0\2\120\2\0\5\120\2\0"+
    "\1\120\1\0\1\120\30\6\3\120\2\6\13\120\5\0"+
    "\2\6\3\120\2\0\12\6\6\120\2\6\6\120\2\6"+
    "\6\120\11\6\7\120\1\6\7\120\1\6\53\120\1\6"+
    "\12\120\12\6\163\120\10\0\1\6\2\0\2\6\12\0"+
    "\6\6\244\120\14\6\27\120\4\6\61\120\4\6\u0100\121"+
    "\156\120\2\6\152\120\46\6\7\120\14\6\5\120\5\6"+
    "\1\120\1\0\12\120\1\6\15\120\1\6\5\120\1\6"+
    "\1\120\1\6\2\120\1\6\2\120\1\6\154\120\41\6"+
    "\153\120\22\6\100\120\2\6\66\120\50\6\15\120\3\6"+
    "\20\0\20\6\20\0\3\6\2\120\30\6\3\120\31\6"+
    "\1\120\6\6\5\120\1\6\207\120\2\6\1\0\4\6"+
    "\1\120\13\6\12\0\7\6\32\120\4\6\1\120\1\6"+
    "\32\120\13\6\131\120\3\6\6\120\2\6\6\120\2\6"+
    "\6\120\2\6\3\120\3\6\2\120\3\6\2\120\22\6"+
    "\3\0\4\6\14\120\1\6\32\120\1\6\23\120\1\6"+
    "\2\120\1\6\17\120\2\6\16\120\42\6\173\120\105\6"+
    "\65\120\210\6\1\0\202\6\35\120\3\6\61\120\17\6"+
    "\1\0\37\6\40\120\15\6\36\120\5\6\46\120\5\0"+
    "\5\6\36\120\2\6\44\120\4\6\10\120\1\6\5\120"+
    "\52\6\236\120\2\6\12\0\6\6\44\120\4\6\44\120"+
    "\4\6\50\120\10\6\64\120\234\6\67\120\11\6\26\120"+
    "\12\6\10\120\230\6\6\120\2\6\1\120\1\6\54\120"+
    "\1\6\2\120\3\6\1\120\2\6\27\120\12\6\27\120"+
    "\11\6\37\120\101\6\23\120\1\6\2\120\12\6\26\120"+
    "\12\6\32\120\106\6\70\120\6\6\2\120\100\6\1\120"+
    "\3\0\1\6\2\0\5\6\4\0\4\120\1\6\3\120"+
    "\1\6\33\120\4\6\3\0\4\6\1\0\40\6\35\120"+
    "\3\6\35\120\43\6\10\120\1\6\34\120\2\0\31\6"+
    "\66\120\12\6\26\120\12\6\23\120\15\6\22\120\156\6"+
    "\111\120\67\6\63\120\15\6\63\120\15\6\3\0\65\120"+
    "\17\0\37\6\12\0\17\6\4\0\55\120\13\0\2\6"+
    "\1\0\22\6\31\120\7\6\12\0\6\6\3\0\44\120"+
    "\16\0\1\6\12\0\20\6\43\120\1\0\2\6\1\120"+
    "\11\6\3\0\60\120\16\0\4\120\5\6\3\0\3\6"+
    "\12\0\1\120\1\6\1\120\43\6\22\120\1\6\31\120"+
    "\14\0\6\6\1\0\101\6\7\120\1\6\1\120\1\6"+
    "\4\120\1\6\17\120\1\6\12\120\7\6\57\120\14\0"+
    "\5\6\12\0\6\6\4\0\1\6\10\120\2\6\2\120"+
    "\2\6\26\120\1\6\7\120\1\6\2\120\1\6\5\120"+
    "\2\6\1\0\1\120\7\0\2\6\2\0\2\6\3\0"+
    "\2\6\1\120\6\6\1\0\5\6\5\120\2\0\2\6"+
    "\7\0\3\6\5\0\213\6\65\120\22\0\4\120\5\6"+
    "\12\0\46\6\60\120\24\0\2\120\1\6\1\120\10\6"+
    "\12\0\246\6\57\120\7\0\2\6\11\0\27\6\4\120"+
    "\2\0\42\6\60\120\21\0\3\6\1\120\13\6\12\0"+
    "\46\6\53\120\15\0\10\6\12\0\66\6\32\120\3\6"+
    "\17\0\4\6\12\0\u0166\6\100\120\12\0\25\6\2\120"+
    "\12\0\50\120\7\0\1\120\4\0\10\6\1\0\10\6"+
    "\1\120\13\0\50\120\2\6\4\120\20\0\46\6\71\120"+
    "\7\6\11\120\1\6\45\120\10\0\1\6\10\0\1\120"+
    "\17\6\12\0\30\6\36\120\2\6\26\0\1\6\16\0"+
    "\111\6\7\120\1\6\2\120\1\6\46\120\6\0\3\6"+
    "\1\0\1\6\2\0\1\6\7\0\1\120\1\0\10\6"+
    "\12\0\246\6\232\120\146\6\157\120\21\6\304\120\274\6"+
    "\57\120\321\6\107\120\271\6\71\120\7\6\37\120\1\6"+
    "\12\0\146\6\36\120\2\6\5\0\13\6\60\120\7\0"+
    "\11\6\4\120\14\6\12\0\11\6\25\120\5\6\23\120"+
    "\160\6\105\120\13\6\1\120\56\0\20\6\4\0\15\120"+
    "\100\6\2\120\36\6\355\120\23\6\363\120\15\6\37\120"+
    "\121\6\u018c\120\4\6\153\120\5\6\15\120\3\6\11\120"+
    "\7\6\12\120\3\6\2\0\1\6\4\0\301\6\5\0"+
    "\3\6\26\0\2\6\7\0\36\6\4\0\224\6\3\0"+
    "\273\6\125\120\1\6\107\120\1\6\2\120\2\6\1\120"+
    "\2\6\2\120\2\6\4\120\1\6\14\120\1\6\1\120"+
    "\1\6\7\120\1\6\101\120\1\6\4\120\2\6\10\120"+
    "\1\6\7\120\1\6\34\120\1\6\4\120\1\6\5\120"+
    "\1\6\1\120\3\6\7\120\1\6\u0154\120\2\6\31\120"+
    "\1\6\31\120\1\6\37\120\1\6\31\120\1\6\37\120"+
    "\1\6\31\120\1\6\37\120\1\6\31\120\1\6\37\120"+
    "\1\6\31\120\1\6\10\120\2\6\151\0\4\6\62\0"+
    "\10\6\1\0\16\6\1\0\26\6\5\0\1\6\17\0"+
    "\120\6\7\0\1\6\21\0\2\6\7\0\1\6\2\0"+
    "\1\6\5\0\325\6\305\120\13\6\7\0\51\6\104\120"+
    "\7\0\5\6\12\0\246\6\4\120\1\6\33\120\1\6"+
    "\2\120\1\6\1\120\2\6\1\120\1\6\12\120\1\6"+
    "\4\120\1\6\1\120\1\6\1\120\6\6\1\120\4\6"+
    "\1\120\1\6\1\120\1\6\1\120\1\6\3\120\1\6"+
    "\2\120\1\6\1\120\2\6\1\120\1\6\1\120\1\6"+
    "\1\120\1\6\1\120\1\6\1\120\1\6\2\120\1\6"+
    "\1\120\2\6\4\120\1\6\7\120\1\6\4\120\1\6"+
    "\4\120\1\6\1\120\1\6\12\120\1\6\21\120\5\6"+
    "\3\120\1\6\5\120\1\6\21\120\104\6\327\120\51\6"+
    "\65\120\13\6\336\120\2\6\u0182\120\16\6\u0131\120\37\6"+
    "\36\120\343\6\1\0\36\6\140\0\200\6\360\0\20\6";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[27904];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\23\0\4\1\1\2\3\3\1\4\2\5\1\6\3\4"+
    "\1\7\1\10\1\3\1\11\1\4\1\10\3\4\1\3"+
    "\1\12\1\13\1\14\1\4\2\14\1\15\1\4\2\16"+
    "\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26"+
    "\1\27\1\15\1\30\1\31\1\15\1\32\1\33\1\34"+
    "\1\35\1\36\3\3\1\37\1\40\1\4\1\41\1\42"+
    "\1\43\2\44\1\45\1\3\1\15\1\46\2\47\1\50"+
    "\1\15\1\51\1\52\1\15\1\53\1\54\3\15\1\3"+
    "\2\43\1\3\2\47\1\3\1\55\1\56\2\57\1\60"+
    "\1\61\1\62\1\63\1\64\1\3\1\65\3\0\1\66"+
    "\1\67\1\0\1\10\3\0\17\10\1\0\1\70\1\0"+
    "\1\71\1\72\2\10\2\0\1\73\1\4\5\0\1\74"+
    "\1\75\2\0\1\76\2\77\1\100\1\76\1\101\1\102"+
    "\1\76\1\103\1\104\1\105\1\106\1\107\1\76\1\110"+
    "\1\111\1\112\1\76\1\113\1\76\2\0\1\114\1\0"+
    "\2\115\10\0\1\116\1\117\2\120\1\116\1\121\1\122"+
    "\1\123\1\124\1\125\2\116\3\0\1\126\1\127\1\130"+
    "\1\76\1\0\1\131\1\132\6\0\1\133\1\60\1\61"+
    "\1\63\1\0\1\134\2\65\3\0\36\10\2\135\2\136"+
    "\1\10\2\137\1\10\12\0\1\77\4\0\1\140\2\0"+
    "\1\141\1\142\5\0\1\120\2\0\1\143\1\0\1\144"+
    "\1\145\3\0\2\146\1\61\1\63\4\0\11\10\1\147"+
    "\12\10\1\150\1\10\1\0\17\10\10\0\1\151\1\0"+
    "\1\152\1\0\1\153\5\0\1\154\3\0\1\61\1\63"+
    "\2\0\1\155\1\156\5\10\1\157\3\10\1\160\10\10"+
    "\1\156\7\10\1\161\1\0\2\10\1\162\14\10\22\0"+
    "\1\61\1\63\1\0\1\163\12\10\1\164\4\10\1\165"+
    "\7\10\1\0\10\10\1\0\1\10\2\166\1\167\3\10"+
    "\11\0\1\170\2\0\1\171\2\0\2\172\3\0\1\61"+
    "\1\63\1\0\3\10\1\173\2\10\1\0\1\174\16\10"+
    "\1\0\2\10\1\175\4\10\1\176\1\0\1\10\2\166"+
    "\4\177\3\10\2\0\1\200\12\0\2\201\1\0\2\10"+
    "\2\202\1\10\1\203\2\10\2\204\10\10\1\150\1\205"+
    "\1\0\1\10\1\206\3\10\2\207\1\176\4\0\1\210"+
    "\4\177\2\10\1\211\1\212\7\0\1\213\1\214\4\0"+
    "\1\215\1\10\2\202\2\216\1\217\1\203\1\0\1\10"+
    "\1\0\1\220\2\204\1\221\1\222\2\10\1\0\3\10"+
    "\2\223\1\10\1\166\4\10\2\207\1\224\1\0\1\176"+
    "\1\0\1\10\1\0\2\225\1\10\1\226\1\227\5\0"+
    "\2\230\2\0\1\10\2\216\1\0\1\10\2\0\2\221"+
    "\1\10\1\0\2\231\1\232\1\10\1\0\3\10\2\233"+
    "\3\10\2\166\2\224\2\176\2\210\2\225\1\10\2\0"+
    "\1\234\5\0\1\235\1\203\2\236\4\0\1\236\1\221"+
    "\1\0\2\10\2\0\2\231\1\237\1\232\1\0\1\240"+
    "\1\10\2\241\2\233\1\10\2\242\1\243\4\244\1\224"+
    "\1\0\1\176\2\0\1\10\1\245\3\0\2\246\5\0"+
    "\2\10\2\0\2\237\1\0\1\240\2\247\2\241\1\250"+
    "\1\251\1\10\2\242\1\252\4\244\2\0\1\210\2\253"+
    "\3\0\2\254\2\0\1\236\1\0\2\10\2\0\1\237"+
    "\1\0\1\232\2\250\1\251\1\10\2\252\2\251\2\176"+
    "\1\0\2\253\1\255\1\0\1\256\1\257\2\260\3\236"+
    "\1\0\1\10\1\222\1\0\1\222\1\250\1\0\1\10"+
    "\1\252\1\0\1\251\1\176\1\210\1\255\1\253\1\255"+
    "\3\0\2\261\1\10\2\253\1\255\5\0\1\10\1\0"+
    "\1\253\2\255\1\0\1\262\3\236\1\10\1\0\1\255"+
    "\3\10\2\263";

  private static int [] zzUnpackAction() {
    int [] result = new int[882];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\122\0\244\0\366\0\u0148\0\u019a\0\u01ec\0\u023e"+
    "\0\u0290\0\u02e2\0\u0334\0\u0386\0\u03d8\0\u042a\0\u047c\0\u04ce"+
    "\0\u0520\0\u0572\0\u05c4\0\u0616\0\u0668\0\u06ba\0\u070c\0\u075e"+
    "\0\u07b0\0\u0802\0\u0668\0\u0854\0\u0668\0\u08a6\0\u08f8\0\u094a"+
    "\0\u099c\0\u09ee\0\u0a40\0\u0a92\0\u0ae4\0\u0b36\0\u0b88\0\u0bda"+
    "\0\u0c2c\0\u0668\0\u0c7e\0\u0cd0\0\u0d22\0\u0668\0\u0668\0\u0d74"+
    "\0\u0dc6\0\u0cd0\0\u0668\0\u0e18\0\u0e6a\0\u0ebc\0\u0668\0\u0668"+
    "\0\u0668\0\u0668\0\u0668\0\u0668\0\u0668\0\u0668\0\u0f0e\0\u0f60"+
    "\0\u0668\0\u0fb2\0\u1004\0\u0668\0\u1056\0\u10a8\0\u0668\0\u10fa"+
    "\0\u114c\0\u119e\0\u11f0\0\u0668\0\u0668\0\u1242\0\u0668\0\u1294"+
    "\0\u12e6\0\u0668\0\u1338\0\u0668\0\u138a\0\u13dc\0\u13dc\0\u13dc"+
    "\0\u142e\0\u0668\0\u1480\0\u14d2\0\u0fb2\0\u1524\0\u0668\0\u0668"+
    "\0\u1576\0\u15c8\0\u161a\0\u166c\0\u0668\0\u16be\0\u1710\0\u0668"+
    "\0\u1762\0\u17b4\0\u0668\0\u1806\0\u0668\0\u1762\0\u1858\0\u18aa"+
    "\0\u0668\0\u18fc\0\u0668\0\u194e\0\u19a0\0\u19f2\0\u1a44\0\u07b0"+
    "\0\u0668\0\u0668\0\u0802\0\u1a96\0\u1ae8\0\u1b3a\0\u1b8c\0\u1bde"+
    "\0\u1c30\0\u1c82\0\u1cd4\0\u1d26\0\u1d78\0\u1dca\0\u1e1c\0\u1e6e"+
    "\0\u1ec0\0\u1f12\0\u1f64\0\u1fb6\0\u2008\0\u205a\0\u20ac\0\u0668"+
    "\0\u20fe\0\u0668\0\u2150\0\u21a2\0\u21f4\0\u0c2c\0\u0cd0\0\u0668"+
    "\0\u2246\0\u2298\0\u0d74\0\u22ea\0\u0e6a\0\u233c\0\u1056\0\u0668"+
    "\0\u238e\0\u23e0\0\u0668\0\u2432\0\u2484\0\u0668\0\u24d6\0\u0668"+
    "\0\u0668\0\u2528\0\u0668\0\u0668\0\u0668\0\u0668\0\u0668\0\u257a"+
    "\0\u0668\0\u0668\0\u0668\0\u25cc\0\u0668\0\u261e\0\u1056\0\u2670"+
    "\0\u26c2\0\u10a8\0\u0668\0\u2714\0\u114c\0\u119e\0\u11f0\0\u2766"+
    "\0\u27b8\0\u280a\0\u285c\0\u28ae\0\u0668\0\u0668\0\u2900\0\u2952"+
    "\0\u29a4\0\u0668\0\u0668\0\u0668\0\u0668\0\u0668\0\u29f6\0\u2a48"+
    "\0\u13dc\0\u0fb2\0\u2a9a\0\u0668\0\u0668\0\u0668\0\u2aec\0\u2b3e"+
    "\0\u0668\0\u0668\0\u166c\0\u2b90\0\u2be2\0\u2c34\0\u2c86\0\u17b4"+
    "\0\u2cd8\0\u2d2a\0\u2d7c\0\u2dce\0\u2e20\0\u0668\0\u0668\0\u2e72"+
    "\0\u2ec4\0\u2f16\0\u2f68\0\u2fba\0\u300c\0\u305e\0\u30b0\0\u3102"+
    "\0\u3154\0\u31a6\0\u31f8\0\u324a\0\u329c\0\u32ee\0\u3340\0\u3392"+
    "\0\u33e4\0\u3436\0\u3488\0\u34da\0\u352c\0\u357e\0\u35d0\0\u3622"+
    "\0\u3674\0\u36c6\0\u3718\0\u376a\0\u37bc\0\u380e\0\u3860\0\u38b2"+
    "\0\u3904\0\u0668\0\u3956\0\u39a8\0\u39fa\0\u3a4c\0\u3a9e\0\u3af0"+
    "\0\u3b42\0\u3b94\0\u3be6\0\u24d6\0\u257a\0\u3c38\0\u3c8a\0\u3cdc"+
    "\0\u3d2e\0\u3d80\0\u3dd2\0\u0668\0\u3e24\0\u3e76\0\u3ec8\0\u3f1a"+
    "\0\u0668\0\u3f6c\0\u3fbe\0\u0668\0\u0668\0\u4010\0\u4062\0\u40b4"+
    "\0\u4106\0\u4158\0\u0668\0\u41aa\0\u41fc\0\u0668\0\u424e\0\u0668"+
    "\0\u0668\0\u42a0\0\u42f2\0\u4344\0\u0668\0\u4396\0\u43e8\0\u443a"+
    "\0\u448c\0\u44de\0\u4530\0\u4582\0\u45d4\0\u4626\0\u4678\0\u46ca"+
    "\0\u471c\0\u476e\0\u47c0\0\u4812\0\u4864\0\u48b6\0\u4908\0\u495a"+
    "\0\u49ac\0\u49fe\0\u4a50\0\u4aa2\0\u4af4\0\u4b46\0\u4b98\0\u4bea"+
    "\0\u4c3c\0\u4c8e\0\u4ce0\0\u4d32\0\u4d84\0\u4dd6\0\u4e28\0\u4e7a"+
    "\0\u4ecc\0\u4f1e\0\u4f70\0\u4fc2\0\u5014\0\u5066\0\u50b8\0\u510a"+
    "\0\u515c\0\u51ae\0\u5200\0\u5252\0\u52a4\0\u52f6\0\u5348\0\u539a"+
    "\0\u53ec\0\u543e\0\u0668\0\u5490\0\u0668\0\u54e2\0\u0668\0\u5534"+
    "\0\u5586\0\u55d8\0\u562a\0\u567c\0\u0668\0\u56ce\0\u5720\0\u5772"+
    "\0\u57c4\0\u5816\0\u5868\0\u58ba\0\u0668\0\u0668\0\u590c\0\u595e"+
    "\0\u59b0\0\u5a02\0\u5a54\0\u1a96\0\u5aa6\0\u5af8\0\u5b4a\0\u1a96"+
    "\0\u5b9c\0\u5bee\0\u5c40\0\u5c92\0\u5ce4\0\u5d36\0\u5d88\0\u5dda"+
    "\0\u1a96\0\u5e2c\0\u5e7e\0\u5ed0\0\u5f22\0\u5f74\0\u5fc6\0\u6018"+
    "\0\u1a96\0\u606a\0\u60bc\0\u610e\0\u1a96\0\u6160\0\u61b2\0\u6204"+
    "\0\u6256\0\u62a8\0\u62fa\0\u634c\0\u639e\0\u63f0\0\u6442\0\u6494"+
    "\0\u64e6\0\u6538\0\u658a\0\u65dc\0\u662e\0\u6680\0\u66d2\0\u6724"+
    "\0\u6776\0\u67c8\0\u681a\0\u686c\0\u68be\0\u6910\0\u6962\0\u69b4"+
    "\0\u6a06\0\u6a58\0\u6aaa\0\u6afc\0\u6b4e\0\u6ba0\0\u0668\0\u6bf2"+
    "\0\u6c44\0\u6c96\0\u6ce8\0\u6d3a\0\u6d8c\0\u6dde\0\u6e30\0\u6e82"+
    "\0\u6ed4\0\u1a96\0\u6f26\0\u6f78\0\u6fca\0\u701c\0\u1a96\0\u706e"+
    "\0\u70c0\0\u7112\0\u7164\0\u71b6\0\u7208\0\u725a\0\u72ac\0\u72fe"+
    "\0\u7350\0\u73a2\0\u73f4\0\u7446\0\u7498\0\u74ea\0\u753c\0\u758e"+
    "\0\u75e0\0\u7632\0\u7684\0\u1a96\0\u76d6\0\u7728\0\u777a\0\u77cc"+
    "\0\u781e\0\u7870\0\u78c2\0\u7914\0\u7966\0\u79b8\0\u7a0a\0\u7a5c"+
    "\0\u681a\0\u7aae\0\u7b00\0\u6910\0\u7b52\0\u7ba4\0\u0668\0\u7bf6"+
    "\0\u7c48\0\u7c9a\0\u7cec\0\u0668\0\u0668\0\u7d3e\0\u7d90\0\u7de2"+
    "\0\u7e34\0\u1a96\0\u7e86\0\u7ed8\0\u7f2a\0\u1a96\0\u7f7c\0\u7fce"+
    "\0\u8020\0\u8072\0\u80c4\0\u8116\0\u8168\0\u81ba\0\u820c\0\u825e"+
    "\0\u82b0\0\u8302\0\u8354\0\u83a6\0\u83f8\0\u844a\0\u849c\0\u1a96"+
    "\0\u84ee\0\u8540\0\u8592\0\u85e4\0\u8636\0\u8688\0\u86da\0\u872c"+
    "\0\u877e\0\u87d0\0\u8822\0\u8874\0\u88c6\0\u8918\0\u39a8\0\u896a"+
    "\0\u89bc\0\u8a0e\0\u8a60\0\u8ab2\0\u8b04\0\u8b56\0\u8ba8\0\u8bfa"+
    "\0\u8c4c\0\u8c9e\0\u8cf0\0\u8d42\0\u8d94\0\u0668\0\u8de6\0\u8e38"+
    "\0\u8e8a\0\u8edc\0\u8f2e\0\u8f80\0\u8fd2\0\u9024\0\u9076\0\u90c8"+
    "\0\u911a\0\u916c\0\u91be\0\u9210\0\u9262\0\u92b4\0\u9306\0\u9358"+
    "\0\u93aa\0\u93fc\0\u1a96\0\u1a96\0\u944e\0\u94a0\0\u1a96\0\u94f2"+
    "\0\u9544\0\u9596\0\u95e8\0\u963a\0\u968c\0\u96de\0\u9730\0\u9782"+
    "\0\u97d4\0\u9826\0\u9878\0\u98ca\0\u991c\0\u996e\0\u99c0\0\u3a9e"+
    "\0\u0668\0\u0668\0\u9a12\0\u9a64\0\u9ab6\0\u9b08\0\u9b5a\0\u9bac"+
    "\0\u9bfe\0\u8c4c\0\u8c9e\0\u9c50\0\u9ca2\0\u9cf4\0\u9d46\0\u1a96"+
    "\0\u9d98\0\u9dea\0\u9e3c\0\u9e8e\0\u9ee0\0\u1a96\0\u9f32\0\u9f84"+
    "\0\u9fd6\0\ua028\0\u1a96\0\ua07a\0\ua0cc\0\ua11e\0\ua170\0\ua1c2"+
    "\0\ua214\0\ua266\0\ua2b8\0\ua30a\0\ua35c\0\ua3ae\0\ua400\0\ua452"+
    "\0\ua4a4\0\ua4f6\0\ua548\0\ua59a\0\ua5ec\0\ua63e\0\ua690\0\ua6e2"+
    "\0\ua734\0\ua786\0\ua7d8\0\ua82a\0\ua87c\0\ua8ce\0\ua920\0\ua972"+
    "\0\ua9c4\0\u0668\0\uaa16\0\uaa68\0\uaaba\0\uab0c\0\uab5e\0\u0668"+
    "\0\uabb0\0\uac02\0\uac54\0\uaca6\0\uacf8\0\uad4a\0\uad9c\0\uadee"+
    "\0\uae40\0\uae92\0\uaee4\0\uaf36\0\uaf88\0\uafda\0\ub02c\0\ub07e"+
    "\0\ub0d0\0\ub122\0\ub174\0\ub1c6\0\ub218\0\ub26a\0\ub2bc\0\ub30e"+
    "\0\ub360\0\ub3b2\0\ub404\0\ub456\0\ub4a8\0\ub4fa\0\ub54c\0\ub59e"+
    "\0\ub5f0\0\ub642\0\ub694\0\ub6e6\0\ub738\0\ub78a\0\ub7dc\0\ub82e"+
    "\0\u0668\0\ub880\0\ub8d2\0\ub924\0\ub976\0\ub9c8\0\u1a96\0\uba1a"+
    "\0\uadee\0\uba6c\0\ubabe\0\ubb10\0\ubb62\0\ubbb4\0\uae92\0\ubc06"+
    "\0\ubc58\0\ubcaa\0\ubcfc\0\ubd4e\0\ubda0\0\ubdf2\0\ube44\0\ube96"+
    "\0\ubee8\0\ubf3a\0\ubf8c\0\ubfde\0\uc030\0\uc082\0\uc0d4\0\uc126"+
    "\0\uc178\0\uc1ca\0\uc21c\0\u1a96\0\uc26e\0\uc2c0\0\uc312\0\uc364"+
    "\0\uc3b6\0\uc408\0\uc45a\0\uc4ac\0\uc4fe\0\uc550\0\u0668\0\uc5a2"+
    "\0\uc5f4\0\uc646\0\u0668\0\uc698\0\uc6ea\0\uc73c\0\uc78e\0\uc7e0"+
    "\0\uc832\0\uc884\0\uc8d6\0\uc928\0\uc97a\0\uc9cc\0\uca1e\0\uca70"+
    "\0\ucac2\0\ucb14\0\ucb66\0\ucbb8\0\ucc0a\0\ucc5c\0\uccae\0\ucd00"+
    "\0\ucd52\0\ucda4\0\ucdf6\0\uce48\0\uce9a\0\uceec\0\ucf3e\0\ucf90"+
    "\0\ucfe2\0\ud034\0\ud086\0\ud0d8\0\ud12a\0\ud17c\0\ud1ce\0\u0668"+
    "\0\ud220\0\ud272\0\ud2c4\0\uc7e0\0\ud316\0\ud368\0\ud3ba\0\ud40c"+
    "\0\ud45e\0\ud4b0\0\ud502\0\ud554\0\ud5a6\0\ud5f8\0\ud64a\0\ud69c"+
    "\0\ud6ee\0\ud740\0\ud792\0\ud7e4\0\ud836\0\ud888\0\ud8da\0\ud92c"+
    "\0\ud97e\0\ud9d0\0\uda22\0\u0668\0\u0668\0\u0668\0\uda74\0\ud2c4"+
    "\0\ud316\0\udac6\0\udb18\0\udb6a\0\u1a96\0\udbbc\0\u0668\0\udc0e"+
    "\0\udc60\0\udcb2\0\udd04\0\udd56\0\udda8\0\uddfa\0\ud8da\0\ude4c"+
    "\0\ude9e\0\udef0\0\udf42\0\udf94\0\udfe6\0\u1a96\0\u0668\0\ue038"+
    "\0\ue08a\0\ue0dc\0\ue12e\0\ue180\0\ue1d2\0\ue224\0\ue276\0\ue2c8"+
    "\0\ue31a\0\ue36c\0\ue3be\0\u0668\0\ue410\0\ue462\0\u0668\0\ue276"+
    "\0\ue2c8\0\ue4b4\0\ue506\0\ue558\0\ud97e\0\ue5aa\0\ue5fc\0\ue64e"+
    "\0\ue6a0\0\ue6f2";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[882];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\3\24\2\25\1\26\4\24\1\27\104\24\1\25\1\24"+
    "\1\0\17\30\1\31\4\30\1\32\75\30\2\33\1\34"+
    "\2\35\1\36\3\33\1\37\7\33\1\40\21\33\13\37"+
    "\4\33\31\37\4\33\1\35\1\37\1\0\1\33\2\41"+
    "\3\42\3\33\1\43\1\44\11\33\1\45\13\33\1\46"+
    "\2\33\13\43\4\33\31\43\4\33\1\42\1\43\1\0"+
    "\1\33\2\47\3\42\3\33\1\43\1\50\11\33\1\45"+
    "\13\33\1\46\2\33\13\43\4\33\31\43\4\33\1\42"+
    "\1\43\1\0\1\33\2\51\2\52\1\53\16\33\1\54"+
    "\12\33\1\55\55\33\1\56\1\33\1\52\1\33\1\0"+
    "\1\57\2\60\2\52\1\53\4\57\1\61\11\57\1\62"+
    "\12\57\1\55\55\57\1\56\1\57\1\52\2\57\1\63"+
    "\2\64\2\65\1\66\1\63\1\67\1\70\1\71\3\63"+
    "\1\72\1\73\1\74\1\75\2\63\1\76\1\77\12\63"+
    "\1\100\2\63\1\101\13\63\1\102\1\103\1\63\1\104"+
    "\31\63\1\105\1\106\1\63\1\107\1\65\1\63\1\0"+
    "\10\110\1\111\3\110\1\112\7\110\1\113\66\110\1\114"+
    "\1\110\1\115\4\110\1\33\5\116\3\33\1\43\7\33"+
    "\1\117\17\33\1\120\1\33\13\43\4\33\31\43\4\33"+
    "\1\116\1\43\1\0\3\121\2\122\1\123\2\121\1\124"+
    "\46\121\1\125\37\121\1\122\2\121\1\63\2\126\1\127"+
    "\1\130\1\131\2\63\1\132\2\63\1\133\6\63\1\134"+
    "\33\63\1\135\1\136\1\137\1\140\31\63\1\141\1\142"+
    "\1\63\1\143\1\130\1\63\1\0\3\144\2\145\1\146"+
    "\4\144\1\147\104\144\1\145\1\144\1\0\1\33\2\41"+
    "\2\150\1\151\13\33\1\152\73\33\1\153\1\33\1\150"+
    "\1\33\1\0\1\33\5\154\111\33\1\154\1\33\1\0"+
    "\5\155\1\156\3\155\1\157\31\155\13\157\4\155\31\157"+
    "\5\155\1\157\1\155\1\33\5\116\17\33\11\160\5\33"+
    "\4\160\14\33\6\160\24\33\1\161\1\33\1\116\1\33"+
    "\1\0\1\33\2\41\2\122\1\123\17\33\11\162\5\33"+
    "\4\162\14\33\6\162\24\33\1\163\1\33\1\122\1\33"+
    "\1\0\3\33\2\150\1\151\17\33\11\164\5\33\4\164"+
    "\14\33\6\164\26\33\1\150\1\33\1\0\3\24\2\25"+
    "\1\26\111\24\1\25\1\24\126\0\1\25\116\0\3\24"+
    "\2\25\1\26\4\24\1\165\104\24\1\25\1\24\1\0"+
    "\17\30\1\166\4\30\1\167\114\30\1\170\4\30\1\171"+
    "\114\30\1\172\4\30\1\173\75\30\2\0\1\34\16\0"+
    "\1\40\103\0\1\35\116\0\2\37\7\0\1\37\13\0"+
    "\11\37\5\0\13\37\4\0\31\37\4\0\2\37\3\0"+
    "\1\40\120\0\2\41\122\0\3\42\111\0\1\42\2\0"+
    "\2\43\7\0\1\43\13\0\11\43\5\0\13\43\4\0"+
    "\31\43\4\0\2\43\12\0\1\174\14\0\1\175\4\0"+
    "\1\176\1\177\6\0\13\174\4\0\1\174\1\200\1\201"+
    "\1\202\1\203\1\204\1\205\2\174\1\206\2\174\1\207"+
    "\1\174\1\210\1\174\1\211\1\174\1\212\1\213\1\214"+
    "\1\174\1\215\1\174\1\216\1\217\4\0\1\174\20\0"+
    "\1\220\4\0\1\221\76\0\2\46\120\0\2\47\7\0"+
    "\1\222\120\0\1\174\1\223\13\0\1\175\4\0\1\176"+
    "\1\177\6\0\13\174\4\0\1\174\1\200\1\201\1\202"+
    "\1\203\1\204\1\205\2\174\1\206\2\174\1\207\1\174"+
    "\1\210\1\174\1\211\1\174\1\224\1\213\1\214\1\174"+
    "\1\215\1\225\1\216\1\217\4\0\1\174\2\0\2\226"+
    "\21\0\1\227\12\0\1\55\55\0\1\56\7\0\1\52"+
    "\135\0\1\230\4\0\1\231\134\0\1\232\62\0\1\57"+
    "\2\233\3\0\4\57\1\61\11\57\1\62\12\57\1\55"+
    "\55\57\1\56\1\57\1\0\2\57\73\0\1\234\27\0"+
    "\2\64\3\235\1\0\1\67\1\70\1\71\3\0\1\72"+
    "\1\73\1\74\1\75\2\0\1\76\1\77\15\0\1\101"+
    "\13\0\1\102\1\236\1\0\1\104\31\0\1\237\1\106"+
    "\1\0\1\107\1\235\3\0\5\235\1\0\1\67\1\70"+
    "\1\71\3\0\1\72\1\73\1\74\1\75\2\0\1\76"+
    "\1\77\15\0\1\101\13\0\1\102\1\236\1\0\1\104"+
    "\31\0\1\237\1\106\1\0\1\107\1\235\3\0\2\235"+
    "\1\65\2\235\1\0\1\67\1\70\1\71\3\0\1\72"+
    "\1\73\1\74\1\75\2\0\1\76\1\77\15\0\1\101"+
    "\13\0\1\102\1\236\1\0\1\104\31\0\1\237\1\106"+
    "\1\0\1\107\1\235\21\0\1\240\4\0\1\231\134\0"+
    "\1\241\120\0\1\242\63\0\3\243\3\0\17\243\4\244"+
    "\3\245\10\243\1\246\4\243\1\247\1\250\1\251\1\252"+
    "\1\253\6\243\1\254\1\243\1\255\1\243\1\256\7\243"+
    "\1\257\1\243\1\260\1\261\1\262\1\263\1\264\1\243"+
    "\1\265\1\266\5\243\1\0\1\243\2\0\2\267\6\0"+
    "\1\270\13\0\11\271\5\0\13\270\4\0\31\270\5\0"+
    "\1\270\2\0\2\272\2\273\1\274\111\0\1\273\2\0"+
    "\10\110\1\275\3\110\1\276\7\110\1\277\66\110\1\0"+
    "\1\110\1\0\4\110\3\275\3\0\2\275\1\110\46\275"+
    "\1\300\37\275\1\0\2\275\3\301\3\0\6\301\1\0"+
    "\42\301\1\302\37\301\1\0\2\301\17\110\1\303\4\110"+
    "\1\304\75\110\1\0\5\116\111\0\1\116\3\0\5\120"+
    "\111\0\1\120\2\0\3\121\3\0\2\121\1\0\46\121"+
    "\1\0\37\121\1\0\2\121\3\0\1\122\116\0\3\305"+
    "\3\0\2\305\1\306\14\305\4\307\3\310\20\305\1\311"+
    "\7\305\1\312\3\305\1\313\7\305\1\314\2\305\1\315"+
    "\1\305\1\316\1\317\2\305\1\320\5\305\1\0\1\305"+
    "\2\0\5\321\50\0\1\322\1\323\37\0\1\321\3\0"+
    "\2\321\1\130\2\321\50\0\1\322\1\323\37\0\1\321"+
    "\15\0\1\324\130\0\1\325\35\0\1\326\41\0\3\243"+
    "\3\0\17\243\4\244\3\245\10\243\1\246\4\243\1\247"+
    "\1\243\1\251\1\252\1\253\6\243\1\254\1\243\1\255"+
    "\1\243\1\256\7\243\1\257\1\243\1\260\1\261\1\262"+
    "\1\263\1\327\1\243\1\265\1\266\5\243\1\0\1\243"+
    "\12\0\1\330\31\0\13\330\4\0\31\330\5\0\1\330"+
    "\115\0\1\331\123\0\1\332\3\0\3\333\2\145\1\146"+
    "\111\333\1\145\1\333\4\0\1\145\116\0\3\333\2\145"+
    "\1\146\61\333\1\334\3\333\1\335\16\333\1\336\2\333"+
    "\1\337\1\333\1\145\1\333\4\0\1\150\117\0\2\340"+
    "\22\0\11\341\65\0\5\154\111\0\1\154\2\0\2\157"+
    "\1\342\6\0\1\157\13\0\11\157\5\0\13\157\4\0"+
    "\31\157\4\0\2\157\26\0\11\343\5\0\4\343\14\0"+
    "\6\343\56\0\11\344\5\0\4\344\14\0\6\344\56\0"+
    "\11\345\5\0\4\345\14\0\6\345\24\0\1\346\4\0"+
    "\3\165\2\347\1\350\111\165\1\347\1\165\1\0\17\30"+
    "\1\166\4\30\1\0\114\30\1\0\4\30\1\167\75\30"+
    "\2\174\7\0\1\174\13\0\11\174\5\0\13\174\4\0"+
    "\31\174\4\0\2\174\33\0\1\351\153\0\1\352\121\0"+
    "\1\353\35\0\2\174\7\0\1\174\13\0\11\174\5\0"+
    "\13\174\4\0\2\174\1\354\15\174\1\355\10\174\4\0"+
    "\2\174\1\0\2\174\7\0\1\174\13\0\11\174\5\0"+
    "\13\174\4\0\24\174\1\356\3\174\1\357\4\0\2\174"+
    "\1\0\2\174\7\0\1\174\13\0\11\174\5\0\13\174"+
    "\4\0\1\174\1\360\6\174\1\361\3\174\1\362\2\174"+
    "\1\363\3\174\1\364\1\365\4\174\4\0\2\174\1\0"+
    "\2\174\7\0\1\174\13\0\11\174\5\0\13\174\4\0"+
    "\5\174\1\366\23\174\4\0\2\174\1\0\2\174\7\0"+
    "\1\174\13\0\11\174\5\0\13\174\4\0\17\174\1\367"+
    "\7\174\1\370\1\174\4\0\2\174\1\0\2\174\7\0"+
    "\1\174\13\0\11\174\5\0\13\174\4\0\11\174\1\371"+
    "\12\174\1\372\4\174\4\0\2\174\1\0\2\174\7\0"+
    "\1\174\13\0\11\174\5\0\13\174\4\0\7\174\1\373"+
    "\5\174\1\374\1\375\12\174\4\0\2\174\1\0\2\174"+
    "\7\0\1\174\13\0\11\174\5\0\13\174\4\0\11\174"+
    "\1\376\17\174\4\0\2\174\1\0\2\174\7\0\1\174"+
    "\13\0\11\174\5\0\13\174\4\0\17\174\1\377\11\174"+
    "\4\0\2\174\1\0\2\174\7\0\1\174\13\0\11\174"+
    "\5\0\13\174\4\0\1\174\1\u0100\22\174\1\u0101\4\174"+
    "\4\0\2\174\1\0\2\174\7\0\1\174\13\0\11\174"+
    "\5\0\13\174\4\0\3\174\1\u0102\17\174\1\u0103\1\u0104"+
    "\4\174\4\0\2\174\1\0\2\174\7\0\1\174\13\0"+
    "\11\174\5\0\13\174\4\0\10\174\1\u0105\17\174\1\u0106"+
    "\4\0\2\174\1\0\2\174\7\0\1\174\13\0\11\174"+
    "\5\0\13\174\4\0\16\174\1\u0107\12\174\4\0\2\174"+
    "\1\0\2\174\7\0\1\174\13\0\11\174\5\0\13\174"+
    "\4\0\1\174\1\u0108\27\174\4\0\2\174\1\0\2\174"+
    "\7\0\1\174\13\0\11\174\5\0\13\174\4\0\30\174"+
    "\1\u0109\4\0\2\174\1\0\3\217\2\u010a\1\u010b\111\217"+
    "\1\u010a\1\217\1\0\3\221\2\52\1\53\111\221\1\52"+
    "\1\221\1\0\3\223\3\0\111\223\1\0\2\223\1\174"+
    "\1\u010c\1\u010d\6\0\1\174\13\0\11\174\5\0\13\174"+
    "\4\0\3\174\1\u0102\17\174\1\u010e\1\u0104\4\174\4\0"+
    "\2\174\1\0\1\174\1\u010f\1\u0110\6\0\1\174\13\0"+
    "\11\174\5\0\13\174\4\0\22\174\1\u0111\6\174\4\0"+
    "\2\174\1\0\3\231\3\0\111\231\1\0\2\231\45\0"+
    "\1\u0112\154\0\1\u0113\65\0\1\246\4\0\1\u0114\1\250"+
    "\1\251\1\0\1\253\10\0\1\255\13\0\1\u0115\1\0"+
    "\1\262\1\0\1\u0116\1\0\1\265\56\0\1\u0117\142\0"+
    "\1\u0118\5\0\1\u0119\1\0\1\u011a\7\0\1\u011b\40\0"+
    "\7\245\113\0\7\u011c\201\0\1\u011d\33\0\11\u011e\5\0"+
    "\4\u011e\14\0\6\u011e\144\0\1\u011f\33\0\11\u0120\5\0"+
    "\4\u0120\14\0\6\u0120\22\0\1\u0121\33\0\11\u0122\5\0"+
    "\4\u0122\14\0\6\u0122\31\0\2\270\1\u0123\6\0\1\270"+
    "\13\0\11\270\5\0\13\270\4\0\31\270\2\0\1\u0124"+
    "\1\0\2\270\26\0\11\271\67\0\1\u0125\116\0\3\275"+
    "\3\0\111\275\1\0\2\275\14\0\1\110\105\0\3\301"+
    "\3\0\17\301\4\u0126\3\u0127\23\301\1\u0128\26\301\1\u0129"+
    "\10\301\1\0\2\301\17\303\1\u012a\102\303\3\304\3\110"+
    "\111\304\1\110\1\304\26\0\7\310\113\0\7\u012b\113\0"+
    "\11\u012c\5\0\4\u012c\14\0\6\u012c\56\0\11\u012d\5\0"+
    "\4\u012d\14\0\6\u012d\22\0\1\u012e\33\0\11\u012f\5\0"+
    "\4\u012f\14\0\6\u012f\75\0\1\246\4\0\1\u0114\1\0"+
    "\1\251\1\0\1\253\10\0\1\255\13\0\1\u0115\1\0"+
    "\1\262\3\0\1\265\36\0\11\u0120\5\0\4\u0120\14\0"+
    "\6\u0120\22\0\1\u0130\6\0\2\330\7\0\1\330\13\0"+
    "\11\330\5\0\13\330\4\0\31\330\2\0\1\u0131\1\0"+
    "\2\330\1\0\3\333\2\145\1\146\73\333\1\u0132\15\333"+
    "\1\145\1\333\1\0\3\333\2\145\1\146\72\333\1\u0133"+
    "\16\333\1\145\1\333\1\0\3\333\2\145\1\146\104\333"+
    "\1\u0134\4\333\1\145\1\333\1\0\3\337\2\u0135\1\u0136"+
    "\111\337\1\u0135\1\337\26\0\11\341\65\0\2\342\144\0"+
    "\11\u0137\5\0\4\u0137\14\0\6\u0137\56\0\11\u0138\5\0"+
    "\4\u0138\14\0\6\u0138\56\0\11\u0139\5\0\4\u0139\14\0"+
    "\6\u0139\24\0\1\346\7\0\1\347\202\0\1\u013a\130\0"+
    "\1\u013b\121\0\1\u013c\26\0\2\174\7\0\1\174\13\0"+
    "\11\174\5\0\13\174\4\0\22\174\1\u013d\6\174\4\0"+
    "\2\174\1\0\2\174\7\0\1\174\13\0\11\174\5\0"+
    "\13\174\4\0\11\174\1\u013e\17\174\4\0\2\174\1\0"+
    "\2\174\7\0\1\174\13\0\11\174\5\0\13\174\4\0"+
    "\6\174\1\u013f\22\174\4\0\2\174\1\0\2\174\7\0"+
    "\1\174\13\0\11\174\5\0\13\174\4\0\1\174\1\u0140"+
    "\27\174\4\0\2\174\1\0\2\174\7\0\1\174\13\0"+
    "\11\174\5\0\13\174\4\0\22\174\1\u0141\6\174\4\0"+
    "\2\174\1\0\2\174\7\0\1\174\13\0\11\174\5\0"+
    "\13\174\4\0\1\174\1\u0142\27\174\4\0\2\174\1\0"+
    "\2\174\7\0\1\174\13\0\11\174\5\0\13\174\4\0"+
    "\1\174\1\u0143\27\174\4\0\2\174\1\0\2\174\7\0"+
    "\1\174\13\0\11\174\5\0\13\174\4\0\14\174\1\u0144"+
    "\14\174\4\0\2\174\1\0\2\174\7\0\1\174\13\0"+
    "\11\174\5\0\13\174\4\0\17\174\1\u0145\11\174\4\0"+
    "\2\174\1\0\2\174\7\0\1\174\13\0\11\174\5\0"+
    "\13\174\4\0\20\174\1\u0146\10\174\4\0\2\174\1\0"+
    "\2\174\7\0\1\174\13\0\11\174\5\0\13\174\4\0"+
    "\2\174\1\u0147\26\174\4\0\2\174\1\0\2\174\7\0"+
    "\1\174\13\0\11\174\5\0\13\174\4\0\6\174\1\u0148"+
    "\22\174\4\0\2\174\1\0\2\174\7\0\1\174\13\0"+
    "\11\174\5\0\13\174\4\0\23\174\1\u0149\5\174\4\0"+
    "\2\174\1\0\2\174\7\0\1\174\13\0\11\174\5\0"+
    "\13\174\4\0\16\174\1\u014a\12\174\4\0\2\174\1\0"+
    "\2\174\7\0\1\174\13\0\11\174\5\0\13\174\4\0"+
    "\14\174\1\u014b\1\174\1\u014c\12\174\4\0\2\174\1\0"+
    "\2\174\7\0\1\174\13\0\11\174\5\0\13\174\4\0"+
    "\16\174\1\u014d\12\174\4\0\2\174\1\0\2\174\7\0"+
    "\1\174\13\0\11\174\5\0\13\174\4\0\20\174\1\u014e"+
    "\10\174\4\0\2\174\1\0\2\174\7\0\1\174\13\0"+
    "\11\174\5\0\13\174\4\0\3\174\1\u014f\5\174\1\u0150"+
    "\11\174\1\u0151\5\174\4\0\2\174\1\0\2\174\7\0"+
    "\1\174\13\0\11\174\5\0\13\174\4\0\16\174\1\u0152"+
    "\12\174\4\0\2\174\1\0\2\174\7\0\1\174\10\0"+
    "\1\u0153\2\0\11\174\5\0\13\174\4\0\1\u0154\22\174"+
    "\1\u0155\5\174\4\0\2\174\1\0\2\174\7\0\1\174"+
    "\13\0\11\174\5\0\13\174\4\0\3\174\1\u0156\25\174"+
    "\4\0\2\174\1\0\2\174\7\0\1\174\13\0\11\174"+
    "\5\0\13\174\4\0\2\174\1\u0157\26\174\4\0\2\174"+
    "\1\0\2\174\7\0\1\174\13\0\11\174\5\0\13\174"+
    "\4\0\1\174\1\u0158\27\174\4\0\2\174\1\0\2\174"+
    "\7\0\1\174\13\0\11\174\5\0\13\174\4\0\1\174"+
    "\1\u0159\27\174\4\0\2\174\1\0\2\174\7\0\1\174"+
    "\13\0\11\174\5\0\13\174\4\0\20\174\1\u015a\10\174"+
    "\4\0\2\174\1\0\2\174\7\0\1\174\13\0\11\174"+
    "\5\0\13\174\4\0\21\174\1\u015b\7\174\4\0\2\174"+
    "\1\0\2\174\7\0\1\174\13\0\11\174\5\0\13\174"+
    "\4\0\20\174\1\u015c\10\174\4\0\2\174\1\0\2\174"+
    "\7\0\1\174\13\0\11\174\5\0\13\174\4\0\11\174"+
    "\1\u015d\17\174\4\0\2\174\1\0\2\174\7\0\1\174"+
    "\13\0\11\174\5\0\13\174\4\0\21\174\1\u015e\7\174"+
    "\4\0\2\174\1\0\2\174\7\0\1\174\13\0\11\174"+
    "\5\0\13\174\4\0\5\174\1\u015f\6\174\1\u0160\14\174"+
    "\4\0\2\174\4\0\1\u010a\116\0\1\174\1\u010c\1\u010d"+
    "\6\0\1\174\13\0\11\174\5\0\13\174\4\0\31\174"+
    "\4\0\2\174\2\0\2\u010d\117\0\2\174\7\0\1\174"+
    "\13\0\11\174\5\0\13\174\4\0\1\174\1\u0161\27\174"+
    "\4\0\2\174\1\0\1\174\1\u010f\1\u0110\6\0\1\174"+
    "\13\0\11\174\5\0\13\174\4\0\31\174\4\0\2\174"+
    "\2\0\2\u0110\117\0\2\174\7\0\1\174\13\0\11\174"+
    "\5\0\13\174\4\0\23\174\1\u0162\5\174\4\0\2\174"+
    "\51\0\1\u0163\136\0\1\u0164\147\0\1\u0121\56\0\1\u0165"+
    "\144\0\1\u0166\124\0\1\u0167\112\0\1\u0168\11\0\1\u0169"+
    "\122\0\1\u016a\17\0\115\u011d\1\u016b\4\u011d\25\0\11\u016c"+
    "\5\0\4\u016c\14\0\6\u016c\31\0\115\u011f\1\u016d\4\u011f"+
    "\25\0\11\u016e\5\0\4\u016e\14\0\6\u016e\56\0\11\u016f"+
    "\5\0\4\u016f\14\0\6\u016f\32\0\2\u0123\112\0\1\u0124"+
    "\20\0\1\110\10\0\7\u0127\102\0\1\110\10\0\7\301"+
    "\102\0\1\110\42\0\1\u0170\26\0\1\u0171\27\0\1\110"+
    "\10\0\11\u0172\5\0\4\u0172\14\0\6\u0172\31\0\17\303"+
    "\1\u012a\4\303\1\110\75\303\25\0\11\u0173\5\0\4\u0173"+
    "\14\0\6\u0173\56\0\11\u0174\5\0\4\u0174\14\0\6\u0174"+
    "\56\0\11\u0175\5\0\4\u0175\14\0\6\u0175\31\0\3\333"+
    "\2\145\1\146\62\333\1\u0176\26\333\1\145\1\333\1\0"+
    "\3\333\2\145\1\146\65\333\1\u0177\23\333\1\145\1\333"+
    "\1\0\3\333\2\145\1\146\70\333\1\u0178\20\333\1\145"+
    "\1\333\4\0\1\u0135\143\0\11\u0179\5\0\4\u0179\14\0"+
    "\6\u0179\56\0\11\u017a\5\0\4\u017a\14\0\6\u017a\56\0"+
    "\11\u017b\5\0\4\u017b\14\0\6\u017b\24\0\1\346\77\0"+
    "\1\u017c\133\0\1\u017d\121\0\1\u017e\14\0\2\174\7\0"+
    "\1\174\13\0\11\174\5\0\13\174\4\0\23\174\1\u017f"+
    "\5\174\4\0\2\174\1\0\2\174\7\0\1\174\13\0"+
    "\11\174\5\0\13\174\4\0\20\174\1\u0180\10\174\4\0"+
    "\2\174\1\0\2\174\7\0\1\174\13\0\11\174\5\0"+
    "\13\174\4\0\6\174\1\u0181\22\174\4\0\2\174\1\0"+
    "\2\174\7\0\1\174\13\0\11\174\5\0\13\174\4\0"+
    "\3\174\1\u0182\25\174\4\0\2\174\1\0\2\174\7\0"+
    "\1\174\13\0\11\174\5\0\13\174\4\0\5\174\1\u0183"+
    "\23\174\4\0\2\174\1\0\2\174\7\0\1\174\13\0"+
    "\11\174\5\0\13\174\4\0\21\174\1\u0184\7\174\4\0"+
    "\2\174\1\0\2\174\7\0\1\174\13\0\11\174\5\0"+
    "\13\174\4\0\22\174\1\u0185\6\174\4\0\2\174\1\0"+
    "\2\174\7\0\1\174\13\0\11\174\5\0\13\174\4\0"+
    "\24\174\1\u0186\4\174\4\0\2\174\1\0\2\174\7\0"+
    "\1\174\13\0\11\174\5\0\13\174\4\0\21\174\1\u0187"+
    "\7\174\4\0\2\174\1\0\2\174\7\0\1\174\13\0"+
    "\2\174\1\u0188\6\174\5\0\13\174\4\0\4\174\1\u0189"+
    "\15\174\1\u018a\6\174\4\0\2\174\1\0\2\174\7\0"+
    "\1\174\13\0\11\174\5\0\13\174\4\0\24\174\1\u018b"+
    "\4\174\4\0\2\174\1\0\2\174\7\0\1\174\13\0"+
    "\11\174\5\0\13\174\4\0\3\174\1\u018c\17\174\1\u018d"+
    "\1\174\1\u018e\3\174\1\217\3\0\2\174\1\0\2\174"+
    "\7\0\1\174\13\0\11\174\5\0\13\174\4\0\5\174"+
    "\1\u018f\23\174\4\0\2\174\1\0\2\174\7\0\1\174"+
    "\13\0\11\174\5\0\13\174\4\0\1\174\1\u0190\27\174"+
    "\4\0\2\174\1\0\2\174\7\0\1\174\13\0\11\174"+
    "\5\0\13\174\4\0\14\174\1\u0191\14\174\4\0\2\174"+
    "\1\0\2\174\7\0\1\174\13\0\11\174\5\0\13\174"+
    "\4\0\3\174\1\u0192\25\174\4\0\2\174\1\0\2\174"+
    "\7\0\1\174\13\0\11\174\5\0\13\174\4\0\17\174"+
    "\1\u0193\11\174\4\0\2\174\1\0\2\174\7\0\1\174"+
    "\13\0\11\174\5\0\13\174\4\0\14\174\1\u0194\14\174"+
    "\4\0\2\174\1\0\2\174\7\0\1\174\13\0\11\174"+
    "\5\0\13\174\4\0\14\174\1\u0195\14\174\4\0\2\174"+
    "\1\0\2\174\7\0\1\174\13\0\11\174\5\0\13\174"+
    "\4\0\23\174\1\u0196\5\174\4\0\2\174\1\0\2\174"+
    "\7\0\1\174\13\0\11\174\5\0\13\174\4\0\5\174"+
    "\1\u0197\20\174\1\u0198\2\174\4\0\2\174\1\0\2\174"+
    "\7\0\1\174\13\0\11\174\5\0\13\174\4\0\5\174"+
    "\1\u0199\23\174\4\0\2\174\111\0\1\u019a\11\0\2\174"+
    "\7\0\1\174\13\0\11\174\5\0\13\174\4\0\22\174"+
    "\1\u019b\6\174\4\0\2\174\1\0\2\174\7\0\1\174"+
    "\13\0\11\174\5\0\13\174\4\0\24\174\1\u019c\4\174"+
    "\4\0\2\174\1\0\2\174\7\0\1\174\13\0\11\174"+
    "\5\0\13\174\4\0\13\174\1\u019d\15\174\4\0\2\174"+
    "\1\0\2\174\7\0\1\174\13\0\11\174\5\0\13\174"+
    "\4\0\14\174\1\u019e\14\174\4\0\2\174\1\0\2\174"+
    "\7\0\1\174\13\0\11\174\5\0\13\174\4\0\16\174"+
    "\1\u019f\12\174\4\0\2\174\1\0\2\174\7\0\1\174"+
    "\13\0\11\174\5\0\13\174\4\0\16\174\1\u01a0\12\174"+
    "\4\0\2\174\1\0\2\174\7\0\1\174\13\0\11\174"+
    "\5\0\13\174\4\0\20\174\1\u01a1\10\174\4\0\2\174"+
    "\1\0\2\174\7\0\1\174\13\0\11\174\5\0\13\174"+
    "\4\0\17\174\1\u01a2\11\174\4\0\2\174\1\0\2\174"+
    "\7\0\1\174\13\0\11\174\5\0\13\174\4\0\5\174"+
    "\1\u01a3\23\174\4\0\2\174\1\0\2\174\7\0\1\174"+
    "\13\0\11\174\5\0\13\174\4\0\3\174\1\u01a4\25\174"+
    "\4\0\2\174\1\0\2\174\7\0\1\174\13\0\11\174"+
    "\5\0\13\174\4\0\16\174\1\u01a5\12\174\4\0\2\174"+
    "\1\0\2\174\7\0\1\174\13\0\11\174\5\0\13\174"+
    "\4\0\17\174\1\u01a6\11\174\4\0\2\174\1\0\2\174"+
    "\7\0\1\174\13\0\11\174\5\0\13\174\4\0\5\174"+
    "\1\u01a7\23\174\4\0\2\174\1\0\2\174\7\0\1\174"+
    "\13\0\11\174\5\0\13\174\4\0\16\174\1\u01a0\4\174"+
    "\1\u01a8\5\174\4\0\2\174\1\0\2\174\7\0\1\174"+
    "\13\0\11\174\5\0\13\174\4\0\1\174\1\u01a9\27\174"+
    "\4\0\2\174\47\0\1\u01aa\151\0\1\u01ab\71\0\1\u01ac"+
    "\144\0\1\u01ad\117\0\1\u01ae\137\0\1\u01af\124\0\1\u01b0"+
    "\113\0\1\u01b1\44\0\11\u01b2\5\0\4\u01b2\14\0\6\u01b2"+
    "\56\0\11\u01b3\5\0\4\u01b3\14\0\6\u01b3\110\0\1\u0170"+
    "\26\0\1\u0171\40\0\11\u0172\5\0\4\u0172\14\0\6\u0172"+
    "\56\0\11\u01b4\5\0\4\u01b4\14\0\6\u01b4\56\0\11\u01b5"+
    "\5\0\4\u01b5\14\0\6\u01b5\56\0\11\u01b6\5\0\4\u01b6"+
    "\14\0\6\u01b6\31\0\3\333\2\145\1\146\77\333\1\u01b7"+
    "\1\333\1\u01b8\5\333\1\u01b9\1\333\1\145\1\333\1\0"+
    "\3\333\2\145\1\146\77\333\1\u01ba\11\333\1\145\1\333"+
    "\1\0\3\333\2\145\1\146\61\333\1\u01bb\27\333\1\145"+
    "\1\333\26\0\11\u01bc\5\0\4\u01bc\14\0\6\u01bc\56\0"+
    "\11\u01bd\5\0\4\u01bd\14\0\6\u01bd\56\0\11\u01be\5\0"+
    "\4\u01be\14\0\6\u01be\24\0\1\346\111\0\1\u01bf\14\0"+
    "\2\174\7\0\1\174\13\0\11\174\5\0\13\174\4\0"+
    "\21\174\1\u01c0\7\174\4\0\2\174\1\0\2\174\7\0"+
    "\1\174\13\0\11\174\5\0\13\174\4\0\21\174\1\u01c1"+
    "\7\174\4\0\2\174\1\0\2\174\7\0\1\174\13\0"+
    "\11\174\5\0\13\174\4\0\5\174\1\u01c2\23\174\4\0"+
    "\2\174\1\0\2\174\7\0\1\174\13\0\11\174\5\0"+
    "\13\174\4\0\3\174\1\u01c3\25\174\4\0\2\174\1\0"+
    "\2\174\7\0\1\174\13\0\11\174\5\0\13\174\4\0"+
    "\14\174\1\u01c4\14\174\4\0\2\174\1\0\2\174\7\0"+
    "\1\174\13\0\11\174\5\0\13\174\4\0\22\174\1\u01c5"+
    "\6\174\4\0\2\174\1\0\2\174\7\0\1\174\13\0"+
    "\11\174\5\0\13\174\4\0\15\174\1\u01c6\13\174\4\0"+
    "\2\174\1\0\2\174\7\0\1\174\13\0\11\174\5\0"+
    "\13\174\4\0\1\174\1\u01c7\27\174\4\0\2\174\1\0"+
    "\2\174\7\0\1\174\13\0\11\174\5\0\13\174\4\0"+
    "\5\174\1\u01c8\23\174\4\0\2\174\1\0\2\174\7\0"+
    "\1\174\13\0\11\174\5\0\13\174\4\0\30\174\1\u01c9"+
    "\4\0\2\174\1\0\2\174\7\0\1\174\13\0\11\174"+
    "\5\0\13\174\4\0\7\174\1\u01ca\21\174\4\0\2\174"+
    "\1\0\2\174\7\0\1\174\13\0\11\174\5\0\13\174"+
    "\4\0\14\174\1\u01cb\14\174\4\0\2\174\1\0\2\174"+
    "\7\0\1\174\13\0\11\174\5\0\13\174\4\0\10\174"+
    "\1\u01cc\20\174\4\0\2\174\1\0\2\174\7\0\1\174"+
    "\13\0\11\174\5\0\13\174\4\0\1\174\1\u01cd\27\174"+
    "\4\0\2\174\1\0\2\174\7\0\1\174\13\0\11\174"+
    "\5\0\13\174\4\0\16\174\1\u01ce\12\174\4\0\2\174"+
    "\1\0\2\174\7\0\1\174\13\0\11\174\5\0\13\174"+
    "\4\0\14\174\1\u01cf\14\174\4\0\2\174\1\0\2\174"+
    "\7\0\1\174\13\0\11\174\5\0\13\174\4\0\23\174"+
    "\1\u01d0\5\174\4\0\2\174\1\0\2\174\7\0\1\174"+
    "\13\0\11\174\5\0\13\174\4\0\21\174\1\u01d1\7\174"+
    "\4\0\2\174\1\0\2\174\7\0\1\174\13\0\11\174"+
    "\5\0\13\174\4\0\5\174\1\u01d2\23\174\4\0\2\174"+
    "\1\0\2\174\7\0\1\174\13\0\11\174\5\0\13\174"+
    "\4\0\24\174\1\u01d3\4\174\4\0\2\174\1\0\2\174"+
    "\7\0\1\174\13\0\11\174\5\0\13\174\4\0\23\174"+
    "\1\u01d4\5\174\1\217\3\0\2\174\1\0\2\174\7\0"+
    "\1\174\13\0\11\174\5\0\13\174\4\0\7\174\1\u01d5"+
    "\21\174\4\0\2\174\1\0\2\174\7\0\1\174\13\0"+
    "\11\174\5\0\13\174\4\0\21\174\1\u01d6\7\174\4\0"+
    "\2\174\64\0\1\u01d7\36\0\2\174\7\0\1\174\13\0"+
    "\11\174\5\0\13\174\4\0\24\174\1\u01d8\4\174\4\0"+
    "\2\174\1\0\2\174\7\0\1\174\13\0\11\174\5\0"+
    "\13\174\4\0\16\174\1\u01d9\12\174\4\0\2\174\1\0"+
    "\2\174\7\0\1\174\13\0\11\174\5\0\13\174\4\0"+
    "\11\174\1\u01da\17\174\4\0\2\174\1\0\2\174\7\0"+
    "\1\174\13\0\11\174\5\0\13\174\4\0\5\174\1\u01db"+
    "\23\174\4\0\2\174\1\0\2\174\7\0\1\174\13\0"+
    "\11\174\5\0\13\174\4\0\4\174\1\u01dc\24\174\4\0"+
    "\2\174\1\0\2\174\7\0\1\174\13\0\11\174\5\0"+
    "\13\174\4\0\21\174\1\u01dd\7\174\4\0\2\174\1\0"+
    "\2\174\7\0\1\174\13\0\11\174\5\0\13\174\4\0"+
    "\26\174\1\u01de\2\174\4\0\2\174\1\0\1\174\1\u01df"+
    "\1\u01e0\6\0\1\174\13\0\11\174\5\0\13\174\4\0"+
    "\31\174\4\0\2\174\1\0\2\174\7\0\1\174\13\0"+
    "\11\174\5\0\13\174\4\0\17\174\1\u01e1\11\174\4\0"+
    "\2\174\1\0\1\174\1\u01e2\1\u01e3\6\0\1\174\13\0"+
    "\11\174\5\0\13\174\4\0\31\174\4\0\2\174\1\0"+
    "\2\174\7\0\1\174\13\0\11\174\5\0\13\174\4\0"+
    "\6\174\1\u01e4\22\174\4\0\2\174\1\0\2\174\7\0"+
    "\1\174\13\0\11\174\5\0\13\174\4\0\27\174\1\u01e5"+
    "\1\174\4\0\2\174\1\0\2\174\7\0\1\174\13\0"+
    "\11\174\5\0\13\174\4\0\5\174\1\u01e6\23\174\4\0"+
    "\2\174\1\0\2\174\7\0\1\174\13\0\11\174\5\0"+
    "\13\174\4\0\23\174\1\u01e7\5\174\4\0\2\174\42\0"+
    "\1\u01e8\166\0\1\u01e9\54\0\1\u01ea\153\0\1\u01eb\133\0"+
    "\1\u01ec\121\0\1\u01ed\103\0\1\u01ee\121\0\1\u01ef\57\0"+
    "\11\u01f0\5\0\4\u01f0\14\0\6\u01f0\56\0\11\u01f1\5\0"+
    "\4\u01f1\14\0\6\u01f1\56\0\11\u01f2\5\0\4\u01f2\14\0"+
    "\6\u01f2\56\0\11\u01f3\5\0\4\u01f3\14\0\6\u01f3\56\0"+
    "\11\u01f4\5\0\4\u01f4\14\0\6\u01f4\31\0\3\333\2\145"+
    "\1\146\64\333\1\u01f5\24\333\1\145\1\333\1\0\3\333"+
    "\2\145\1\146\55\333\1\u01f6\33\333\1\145\1\333\1\0"+
    "\3\u01b9\2\u01f7\1\u01f8\111\u01b9\1\u01f7\1\u01b9\1\0\3\333"+
    "\2\145\1\146\77\333\1\u01f9\7\333\1\u01fa\1\333\1\145"+
    "\1\333\1\0\3\333\2\145\1\146\103\333\1\u01fb\5\333"+
    "\1\145\1\333\26\0\11\u01fc\5\0\4\u01fc\14\0\6\u01fc"+
    "\56\0\11\u01fd\5\0\4\u01fd\14\0\6\u01fd\56\0\11\u01fe"+
    "\5\0\4\u01fe\14\0\6\u01fe\24\0\1\346\4\0\2\174"+
    "\7\0\1\174\13\0\11\174\5\0\13\174\4\0\1\174"+
    "\1\u01ff\27\174\4\0\2\174\1\0\2\174\7\0\1\174"+
    "\13\0\11\174\5\0\13\174\4\0\11\174\1\u0200\17\174"+
    "\4\0\2\174\1\0\2\174\7\0\1\174\13\0\11\174"+
    "\5\0\13\174\4\0\21\174\1\u0201\7\174\4\0\2\174"+
    "\1\0\2\174\7\0\1\174\13\0\11\174\5\0\13\174"+
    "\4\0\12\174\1\u0202\16\174\4\0\2\174\1\0\2\174"+
    "\7\0\1\174\13\0\11\174\5\0\13\174\4\0\5\174"+
    "\1\u0203\23\174\4\0\2\174\1\0\1\174\1\u0204\1\u0205"+
    "\6\0\1\174\13\0\11\174\5\0\13\174\4\0\31\174"+
    "\4\0\2\174\1\0\2\174\7\0\1\174\13\0\11\174"+
    "\5\0\13\174\4\0\16\174\1\u0206\12\174\4\0\2\174"+
    "\1\0\2\174\7\0\1\174\13\0\11\174\5\0\13\174"+
    "\4\0\21\174\1\u0207\7\174\4\0\2\174\1\0\2\174"+
    "\7\0\1\174\13\0\11\174\5\0\13\174\4\0\2\174"+
    "\1\u0208\26\174\4\0\2\174\1\0\2\174\7\0\1\174"+
    "\13\0\11\174\5\0\13\174\4\0\15\174\1\u0209\13\174"+
    "\4\0\2\174\1\0\2\174\7\0\1\174\13\0\11\174"+
    "\5\0\13\174\4\0\17\174\1\u020a\11\174\4\0\2\174"+
    "\1\0\2\174\7\0\1\174\13\0\11\174\5\0\13\174"+
    "\4\0\21\174\1\u020b\7\174\4\0\2\174\1\0\2\174"+
    "\7\0\1\174\13\0\11\174\5\0\13\174\4\0\14\174"+
    "\1\u020c\14\174\4\0\2\174\1\0\2\174\7\0\1\174"+
    "\13\0\11\174\5\0\13\174\4\0\4\174\1\u020d\24\174"+
    "\4\0\2\174\1\0\2\174\7\0\1\174\13\0\11\174"+
    "\5\0\13\174\4\0\11\174\1\u020e\17\174\4\0\2\174"+
    "\1\0\2\174\7\0\1\174\13\0\11\174\5\0\13\174"+
    "\4\0\5\174\1\u020f\23\174\4\0\2\174\1\0\2\174"+
    "\7\0\1\174\13\0\11\174\5\0\13\174\4\0\15\174"+
    "\1\u0210\13\174\4\0\2\174\1\0\2\174\7\0\1\174"+
    "\13\0\11\174\5\0\13\174\4\0\4\174\1\u0211\24\174"+
    "\4\0\2\174\1\0\2\174\7\0\1\174\13\0\11\174"+
    "\5\0\13\174\4\0\10\174\1\u0212\20\174\4\0\2\174"+
    "\1\0\2\174\7\0\1\174\13\0\11\174\5\0\13\174"+
    "\4\0\5\174\1\u0213\23\174\4\0\2\174\1\0\2\174"+
    "\7\0\1\174\13\0\11\174\5\0\13\174\4\0\1\174"+
    "\1\u0214\27\174\4\0\2\174\104\0\1\u0215\16\0\2\174"+
    "\7\0\1\174\13\0\11\174\5\0\13\174\4\0\20\174"+
    "\1\u0216\10\174\4\0\2\174\1\0\2\174\7\0\1\174"+
    "\13\0\11\174\5\0\13\174\4\0\11\174\1\u0217\17\174"+
    "\4\0\2\174\1\0\2\174\7\0\1\174\13\0\11\174"+
    "\5\0\13\174\4\0\3\174\1\u0218\25\174\4\0\2\174"+
    "\1\0\2\174\7\0\1\174\13\0\11\174\5\0\13\174"+
    "\4\0\21\174\1\u0219\7\174\4\0\2\174\1\0\2\174"+
    "\7\0\1\174\13\0\11\174\5\0\13\174\4\0\1\174"+
    "\1\u021a\27\174\4\0\2\174\1\0\2\174\7\0\1\174"+
    "\13\0\11\174\5\0\13\174\4\0\5\174\1\u021b\23\174"+
    "\4\0\2\174\1\0\2\174\7\0\1\174\13\0\11\174"+
    "\5\0\13\174\4\0\22\174\1\u021c\6\174\4\0\2\174"+
    "\1\0\1\174\1\u01df\1\u01e0\6\0\1\u021d\13\0\11\174"+
    "\1\0\1\u021e\3\0\13\u021d\4\0\31\u021d\4\0\1\174"+
    "\1\u021d\2\0\2\u01e0\6\0\1\u021d\25\0\1\u021e\3\0"+
    "\13\u021d\4\0\31\u021d\5\0\1\u021d\1\0\2\174\7\0"+
    "\1\174\13\0\11\174\5\0\13\174\4\0\4\174\1\u021f"+
    "\24\174\4\0\2\174\1\0\1\u0220\1\u01e2\1\u01e3\3\0"+
    "\3\u0221\1\u0220\10\u0221\1\u0222\2\u0221\11\u0220\5\u0221\13\u0223"+
    "\4\u0221\1\u0223\1\u0224\27\u0223\4\u0221\1\174\1\u0220\2\u0221"+
    "\2\u01e3\3\0\14\u0221\1\u0222\20\u0221\13\u0222\4\u0221\1\u0222"+
    "\1\u0225\27\u0222\4\u0221\1\0\2\u0221\2\174\7\0\1\174"+
    "\13\0\11\174\5\0\13\174\4\0\23\174\1\u0226\5\174"+
    "\4\0\2\174\1\0\1\174\1\u010c\1\u010d\6\0\1\174"+
    "\13\0\11\174\5\0\13\174\4\0\22\174\1\u0227\6\174"+
    "\4\0\2\174\1\0\2\174\7\0\1\174\13\0\11\174"+
    "\5\0\13\174\4\0\5\174\1\u0228\23\174\4\0\2\174"+
    "\42\0\1\u0229\146\0\1\u022a\74\0\1\u022b\165\0\1\u022c"+
    "\121\0\1\u022d\103\0\1\u022e\135\0\1\u022f\121\0\1\u0230"+
    "\43\0\11\u0231\5\0\4\u0231\14\0\6\u0231\56\0\11\301"+
    "\5\0\4\301\14\0\6\301\56\0\11\u0232\5\0\4\u0232"+
    "\14\0\6\u0232\31\0\3\333\2\145\1\146\75\333\1\u0233"+
    "\13\333\1\145\1\333\1\0\3\333\2\145\1\146\70\333"+
    "\1\u0234\20\333\1\145\1\333\4\0\1\u01f7\116\0\3\333"+
    "\2\145\1\146\64\333\1\u0235\24\333\1\145\1\333\1\0"+
    "\3\u01fa\2\u0236\1\u0237\111\u01fa\1\u0236\1\u01fa\1\0\3\333"+
    "\2\145\1\146\77\333\1\u0238\11\333\1\145\1\333\116\0"+
    "\1\346\4\0\2\174\7\0\1\174\13\0\11\174\5\0"+
    "\13\174\4\0\3\174\1\u0239\25\174\4\0\2\174\1\0"+
    "\2\174\7\0\1\174\13\0\11\174\5\0\13\174\4\0"+
    "\25\174\1\u023a\3\174\4\0\2\174\1\0\1\174\1\u023b"+
    "\1\u023c\6\0\1\174\13\0\11\174\5\0\13\174\4\0"+
    "\31\174\4\0\2\174\1\0\2\174\7\0\1\174\13\0"+
    "\11\174\5\0\13\174\4\0\22\174\1\u023d\6\174\4\0"+
    "\2\174\1\0\1\174\1\u0204\1\u0205\6\0\1\u023e\13\0"+
    "\11\174\5\0\13\u023e\4\0\31\u023e\4\0\1\174\1\u023e"+
    "\2\0\2\u0205\6\0\1\u023e\31\0\13\u023e\4\0\31\u023e"+
    "\5\0\1\u023e\1\0\2\174\7\0\1\174\13\0\11\174"+
    "\5\0\13\174\4\0\7\174\1\u023f\21\174\4\0\2\174"+
    "\1\0\2\174\7\0\1\174\13\0\11\174\5\0\13\174"+
    "\4\0\24\174\1\u0240\4\174\4\0\2\174\1\0\1\174"+
    "\1\u0241\1\u0242\6\0\1\174\13\0\11\174\5\0\13\174"+
    "\4\0\31\174\4\0\2\174\1\0\2\174\7\0\1\174"+
    "\13\0\11\174\5\0\13\174\4\0\22\174\1\u0243\6\174"+
    "\4\0\2\174\1\0\2\174\7\0\1\174\13\0\11\174"+
    "\5\0\13\174\4\0\17\174\1\u0244\11\174\4\0\2\174"+
    "\1\0\2\174\7\0\1\174\13\0\11\174\5\0\13\174"+
    "\4\0\31\174\1\217\3\0\2\174\1\0\2\174\7\0"+
    "\1\174\13\0\11\174\5\0\13\174\4\0\22\174\1\u0245"+
    "\6\174\4\0\2\174\1\0\2\174\7\0\1\174\13\0"+
    "\11\174\5\0\13\174\4\0\17\174\1\u0246\11\174\4\0"+
    "\2\174\1\0\2\174\7\0\1\174\13\0\11\174\5\0"+
    "\13\174\4\0\3\174\1\u0247\25\174\4\0\2\174\1\0"+
    "\2\174\7\0\1\174\13\0\11\174\5\0\13\174\4\0"+
    "\5\174\1\u0248\23\174\4\0\2\174\1\0\2\174\7\0"+
    "\1\174\13\0\11\174\5\0\13\174\4\0\5\174\1\u0249"+
    "\23\174\4\0\2\174\1\0\2\174\7\0\1\174\13\0"+
    "\11\174\5\0\13\174\4\0\21\174\1\u024a\7\174\4\0"+
    "\2\174\1\0\2\174\7\0\1\174\13\0\11\174\5\0"+
    "\13\174\4\0\21\174\1\u024b\7\174\4\0\2\174\1\0"+
    "\2\174\7\0\1\174\13\0\11\174\5\0\13\174\4\0"+
    "\20\174\1\u024c\10\174\4\0\2\174\101\0\1\u024d\21\0"+
    "\2\174\7\0\1\174\13\0\11\174\5\0\13\174\4\0"+
    "\20\174\1\u024e\10\174\4\0\2\174\1\0\2\174\7\0"+
    "\1\174\13\0\11\174\5\0\13\174\4\0\27\174\1\u024f"+
    "\1\174\4\0\2\174\1\0\2\174\7\0\1\174\13\0"+
    "\11\174\5\0\13\174\4\0\21\174\1\u0250\7\174\4\0"+
    "\2\174\1\0\2\174\7\0\1\174\13\0\11\174\5\0"+
    "\13\174\4\0\14\174\1\u0251\14\174\4\0\2\174\1\0"+
    "\2\174\7\0\1\174\13\0\11\174\5\0\13\174\4\0"+
    "\22\174\1\u0252\6\174\4\0\2\174\1\0\1\174\1\u0253"+
    "\1\u0254\6\0\1\174\13\0\11\174\5\0\13\174\4\0"+
    "\31\174\4\0\2\174\1\0\2\u021d\1\u0255\6\0\1\u021d"+
    "\11\0\1\u0256\1\0\11\u021d\1\0\1\u0257\3\0\13\u021d"+
    "\1\u0258\3\0\31\u021d\4\0\2\u021d\1\0\3\u0259\6\0"+
    "\1\u0259\1\0\1\u0259\5\0\1\u0259\1\0\1\u0259\1\0"+
    "\11\u0259\1\0\1\u0259\1\0\15\u0259\4\0\31\u0259\4\0"+
    "\2\u0259\1\0\2\174\7\0\1\174\13\0\11\174\5\0"+
    "\13\174\4\0\5\174\1\u025a\23\174\4\0\2\174\1\0"+
    "\2\u0220\1\u0221\3\0\3\u0221\1\u0220\13\u0221\11\u0220\5\u0221"+
    "\13\u0220\4\u0221\31\u0220\4\u0221\1\174\1\u0220\4\u0221\3\0"+
    "\111\u0221\1\0\3\u0221\2\u025b\3\0\14\u0221\1\u0222\20\u0221"+
    "\13\u0222\4\u0221\31\u0222\4\u0221\1\0\2\u0221\1\u0220\1\u025c"+
    "\1\u025b\3\0\3\u0221\1\u0220\10\u0221\1\u0222\2\u0221\11\u0220"+
    "\5\u0221\13\u0223\4\u0221\31\u0223\4\u0221\1\174\1\u0220\1\u0221"+
    "\1\u0220\1\u025c\1\u025b\3\0\3\u0221\1\u0220\10\u0221\1\u0222"+
    "\2\u0221\11\u0220\5\u0221\13\u0223\4\u0221\14\u0223\1\u025d\14\u0223"+
    "\4\u0221\1\174\1\u0220\2\u0221\2\u025b\3\0\14\u0221\1\u0222"+
    "\20\u0221\13\u0222\4\u0221\14\u0222\1\u025e\14\u0222\4\u0221\1\0"+
    "\2\u0221\2\174\7\0\1\174\13\0\11\174\5\0\13\174"+
    "\4\0\10\174\1\u025f\20\174\4\0\2\174\1\0\1\174"+
    "\1\u010f\1\u0110\6\0\1\174\13\0\11\174\5\0\13\174"+
    "\4\0\22\174\1\u0260\6\174\4\0\2\174\2\0\5\u0229"+
    "\105\0\1\u0261\1\u0262\2\0\1\u0229\71\0\1\u0263\33\0"+
    "\5\u0264\111\0\1\u0264\40\0\1\u0265\152\0\1\u0266\135\0"+
    "\1\u0267\103\0\1\u0268\121\0\1\u0269\61\0\11\u026a\5\0"+
    "\4\u026a\14\0\6\u026a\56\0\11\u026b\5\0\4\u026b\14\0"+
    "\6\u026b\31\0\3\333\2\145\1\146\73\333\1\u026c\15\333"+
    "\1\145\1\333\1\0\3\333\2\145\1\146\107\333\1\u026d"+
    "\1\333\1\145\1\333\1\0\3\333\2\145\1\146\75\333"+
    "\1\u026e\13\333\1\145\1\333\4\0\1\u0236\116\0\3\333"+
    "\2\145\1\146\64\333\1\u026f\24\333\1\145\1\333\1\0"+
    "\2\174\7\0\1\174\13\0\11\174\5\0\13\174\4\0"+
    "\23\174\1\u0270\5\174\4\0\2\174\1\0\2\174\7\0"+
    "\1\174\13\0\11\174\5\0\13\174\4\0\1\174\1\u0271"+
    "\27\174\4\0\2\174\1\0\1\u0272\1\u023b\1\u023c\3\0"+
    "\3\u0273\1\u0272\13\u0273\11\u0274\5\u0273\13\u0272\4\u0273\31\u0272"+
    "\4\u0273\1\174\1\u0272\2\u0273\2\u023c\3\0\17\u0273\11\u0275"+
    "\61\u0273\1\0\2\u0273\2\174\7\0\1\174\13\0\11\174"+
    "\5\0\13\174\4\0\22\174\1\u0276\6\174\4\0\2\174"+
    "\1\0\2\u023e\1\u0277\6\0\1\u023e\13\0\11\u023e\1\0"+
    "\1\u0278\3\0\13\u023e\4\0\31\u023e\4\0\2\u023e\1\0"+
    "\1\174\1\u0279\1\u027a\6\0\1\174\13\0\11\174\5\0"+
    "\13\174\4\0\31\174\4\0\2\174\1\0\2\174\7\0"+
    "\1\174\13\0\11\174\5\0\13\174\4\0\7\174\1\u027b"+
    "\21\174\4\0\2\174\1\0\1\u027c\1\u0241\1\u0242\3\0"+
    "\3\u027d\1\u027e\13\u027d\11\u027c\5\u027d\13\u027e\4\u027d\31\u027e"+
    "\4\u027d\1\174\1\u027e\2\u027d\2\u0242\3\0\3\u027d\1\u027e"+
    "\31\u027d\13\u027e\4\u027d\31\u027e\4\u027d\1\0\1\u027e\1\u027d"+
    "\2\174\7\0\1\174\13\0\11\174\5\0\13\174\4\0"+
    "\5\174\1\u027f\23\174\4\0\2\174\1\0\2\174\7\0"+
    "\1\174\13\0\11\174\5\0\13\174\4\0\26\174\1\u0280"+
    "\2\174\4\0\2\174\1\0\1\174\1\u0281\1\u0282\6\0"+
    "\1\174\13\0\11\174\5\0\13\174\4\0\31\174\4\0"+
    "\2\174\1\0\2\174\7\0\1\174\13\0\11\174\5\0"+
    "\13\174\4\0\16\174\1\u0283\12\174\4\0\2\174\1\0"+
    "\2\174\7\0\1\174\13\0\11\174\5\0\13\174\4\0"+
    "\1\174\1\u0284\27\174\4\0\2\174\1\0\2\174\7\0"+
    "\1\174\13\0\11\174\5\0\13\174\4\0\16\174\1\u0285"+
    "\12\174\4\0\2\174\1\0\1\174\1\u0286\1\u0287\6\0"+
    "\1\174\13\0\11\174\5\0\13\174\4\0\31\174\4\0"+
    "\2\174\1\0\2\174\7\0\1\174\13\0\11\174\5\0"+
    "\13\174\4\0\17\174\1\u0288\11\174\4\0\2\174\2\0"+
    "\2\u0289\117\0\2\174\7\0\1\174\13\0\11\174\5\0"+
    "\13\174\4\0\21\174\1\u028a\7\174\4\0\2\174\1\0"+
    "\2\174\7\0\1\174\13\0\11\174\5\0\13\174\4\0"+
    "\17\174\1\u028b\11\174\4\0\2\174\1\0\2\174\7\0"+
    "\1\174\13\0\11\174\5\0\13\174\4\0\17\174\1\u028c"+
    "\11\174\4\0\2\174\1\0\2\174\7\0\1\174\13\0"+
    "\11\174\5\0\13\174\4\0\22\174\1\u028d\6\174\4\0"+
    "\2\174\1\0\1\u028e\1\u0253\1\u0254\3\0\3\u028f\1\u0290"+
    "\13\u028f\11\u028e\5\u028f\13\u0290\4\u028f\31\u0290\4\u028f\1\174"+
    "\1\u0290\2\u028f\2\u0254\3\0\3\u028f\1\u0290\31\u028f\13\u0290"+
    "\4\u028f\31\u0290\4\u028f\1\0\1\u0290\1\u028f\1\0\2\u0255"+
    "\20\0\1\u0256\13\0\1\u0257\16\0\1\u0258\44\0\2\u0256"+
    "\6\0\1\u021d\31\0\13\u021d\4\0\31\u021d\5\0\1\u021d"+
    "\1\0\3\u0291\6\0\1\u0291\1\0\1\u0291\5\0\1\u0291"+
    "\1\0\1\u0291\1\0\11\u0291\1\0\1\u0291\1\0\15\u0291"+
    "\4\0\31\u0291\4\0\2\u0291\2\0\2\u0258\55\0\1\u0292"+
    "\41\0\3\u0259\6\0\1\u0259\1\0\1\u0259\5\0\1\u0259"+
    "\1\0\1\u0259\1\0\11\u0259\1\0\1\u0259\1\0\1\u0293"+
    "\14\u0259\4\0\31\u0259\4\0\2\u0259\1\0\1\174\1\u0294"+
    "\1\u0295\6\0\1\174\13\0\11\174\5\0\13\174\4\0"+
    "\31\174\4\0\2\174\1\0\1\u0221\2\u025b\3\0\111\u0221"+
    "\1\0\2\u0221\1\u0220\1\u025c\1\u025b\3\0\3\u0221\1\u0220"+
    "\13\u0221\11\u0220\5\u0221\13\u0220\4\u0221\31\u0220\4\u0221\1\174"+
    "\1\u0220\1\u0221\1\u0220\1\u025c\1\u025b\3\0\3\u0221\1\u0220"+
    "\10\u0221\1\u0222\2\u0221\11\u0220\5\u0221\13\u0223\4\u0221\14\u0223"+
    "\1\u0296\14\u0223\4\u0221\1\174\1\u0220\2\u0221\2\u025b\3\0"+
    "\14\u0221\1\u0222\20\u0221\13\u0222\4\u0221\14\u0222\1\u0297\14\u0222"+
    "\4\u0221\1\0\2\u0221\2\174\7\0\1\174\13\0\11\174"+
    "\5\0\13\174\4\0\21\174\1\u0298\7\174\4\0\2\174"+
    "\2\0\2\u0299\120\0\5\u0264\105\0\1\u029a\3\0\1\u0264"+
    "\62\0\1\255\144\0\1\u029b\54\0\1\u029c\146\0\1\u029d"+
    "\121\0\1\u029e\36\0\3\333\2\145\1\146\102\333\1\u029f"+
    "\6\333\1\145\1\333\1\0\3\u026d\2\u02a0\1\u02a1\111\u026d"+
    "\1\u02a0\1\u026d\1\0\3\333\2\145\1\146\73\333\1\u02a2"+
    "\15\333\1\145\1\333\1\0\3\333\2\145\1\146\75\333"+
    "\1\u02a3\13\333\1\145\1\333\1\0\2\174\7\0\1\174"+
    "\13\0\11\174\5\0\13\174\4\0\23\174\1\u02a4\5\174"+
    "\4\0\2\174\1\0\2\u0272\1\u0273\3\0\3\u0273\1\u0272"+
    "\13\u0273\11\u0272\5\u0273\13\u0272\4\u0273\31\u0272\4\u0273\1\174"+
    "\1\u0272\4\u0273\3\0\111\u0273\1\0\2\u0273\1\u0272\1\u02a5"+
    "\1\u02a6\3\0\3\u0273\1\u0272\13\u0273\11\u0274\5\u0273\13\u0272"+
    "\4\u0273\31\u0272\4\u0273\1\174\1\u0272\2\u0273\2\u02a6\3\0"+
    "\17\u0273\11\u0275\61\u0273\1\0\2\u0273\1\0\2\u0277\34\0"+
    "\1\u0278\62\0\3\u02a7\6\0\1\u02a7\1\0\1\u02a7\5\0"+
    "\1\u02a7\1\0\1\u02a7\1\0\11\u02a7\1\0\1\u02a7\1\0"+
    "\15\u02a7\4\0\31\u02a7\4\0\2\u02a7\1\0\1\174\1\u0279"+
    "\1\u027a\6\0\1\u02a8\13\0\11\174\1\0\1\u02a9\3\0"+
    "\13\u02a8\4\0\31\u02a8\4\0\1\174\1\u02a8\2\0\2\u027a"+
    "\6\0\1\u02aa\25\0\1\u02a9\3\0\13\u02aa\4\0\31\u02aa"+
    "\5\0\1\u02aa\1\0\2\u027c\1\u027d\3\0\3\u027d\1\u027c"+
    "\13\u027d\11\u027c\5\u027d\13\u027c\4\u027d\31\u027c\4\u027d\1\174"+
    "\1\u027c\4\u027d\3\0\111\u027d\1\0\2\u027d\2\u027e\1\u02ab"+
    "\3\0\3\u027d\1\u027e\11\u027d\1\u0242\1\u027d\11\u027e\5\u027d"+
    "\13\u027e\4\u027d\31\u027e\4\u027d\1\u02ac\1\u027e\1\u027d\1\174"+
    "\1\u02ad\1\u02ae\6\0\1\174\13\0\11\174\5\0\13\174"+
    "\4\0\31\174\4\0\2\174\1\0\1\174\1\u02af\1\u02b0"+
    "\6\0\1\174\13\0\11\174\5\0\13\174\4\0\31\174"+
    "\1\217\3\0\2\174\1\0\1\174\1\u0281\1\u0282\6\0"+
    "\1\u02b1\13\0\11\174\5\0\13\u02b1\4\0\31\u02b1\4\0"+
    "\1\174\1\u02b1\2\0\2\u0282\6\0\1\u02b1\31\0\13\u02b1"+
    "\4\0\31\u02b1\5\0\1\u02b1\1\0\1\174\1\u02b2\1\u02b3"+
    "\6\0\1\174\13\0\11\174\5\0\13\174\4\0\31\174"+
    "\4\0\2\174\1\0\2\174\7\0\1\174\13\0\11\174"+
    "\5\0\13\174\4\0\22\174\1\u02b4\6\174\4\0\2\174"+
    "\1\0\2\174\7\0\1\174\13\0\11\174\5\0\13\174"+
    "\4\0\23\174\1\u02b5\5\174\4\0\2\174\1\0\2\u0286"+
    "\1\u0287\3\0\3\u0287\1\u0286\13\u0287\11\u0286\5\u0287\13\u0286"+
    "\4\u0287\31\u0286\4\u0287\1\174\1\u0286\1\0\3\u0287\3\0"+
    "\111\u0287\1\0\1\u0287\1\0\2\174\7\0\1\174\13\0"+
    "\11\174\5\0\13\174\4\0\26\174\1\u02b6\2\174\4\0"+
    "\2\174\1\0\1\u0221\2\u0289\3\0\14\u0221\1\u02b7\20\u0221"+
    "\13\u02b7\4\u0221\1\u02b7\1\u02b8\27\u02b7\4\u0221\1\0\2\u0221"+
    "\2\174\7\0\1\174\13\0\11\174\5\0\13\174\4\0"+
    "\5\174\1\u02b9\23\174\4\0\2\174\1\0\2\174\7\0"+
    "\1\174\13\0\11\174\5\0\13\174\4\0\21\174\1\u02ba"+
    "\7\174\4\0\2\174\1\0\2\174\7\0\1\174\13\0"+
    "\11\174\5\0\13\174\4\0\16\174\1\u02bb\12\174\4\0"+
    "\2\174\1\0\1\174\1\u02bc\1\u02bd\6\0\1\174\13\0"+
    "\11\174\5\0\13\174\4\0\31\174\4\0\2\174\1\0"+
    "\2\u028e\1\u028f\3\0\3\u028f\1\u028e\13\u028f\11\u028e\5\u028f"+
    "\13\u028e\4\u028f\31\u028e\4\u028f\1\174\1\u028e\4\u028f\3\0"+
    "\111\u028f\1\0\2\u028f\2\u0290\1\u02be\3\0\3\u028f\1\u0290"+
    "\7\u028f\1\u0254\1\u028f\1\u0254\1\u028f\11\u0290\5\u028f\13\u0290"+
    "\4\u028f\31\u0290\4\u028f\1\u02bf\1\u0290\1\u028f\3\u0291\6\0"+
    "\1\u0291\1\0\1\u0291\5\0\1\u0291\1\0\1\u0291\1\0"+
    "\11\u0291\1\0\1\u0291\1\0\1\u02c0\14\u0291\4\0\31\u0291"+
    "\4\0\2\u0291\2\0\2\u0292\53\0\1\u0258\43\0\1\u0259"+
    "\2\u0293\6\0\1\u02c1\1\0\1\u0259\5\0\1\u0259\1\0"+
    "\1\u0259\1\0\11\u0259\1\0\1\u0259\1\0\1\u0293\1\u0259"+
    "\13\u02c1\4\0\31\u02c1\4\0\1\u0259\1\u02c1\1\0\1\174"+
    "\1\u0294\1\u0295\6\0\1\174\13\0\1\174\10\u02c2\5\0"+
    "\13\174\4\0\31\174\4\0\2\174\2\0\2\u0295\23\0"+
    "\10\u02c3\64\0\1\u0220\1\u02c4\1\u02c5\3\0\3\u0221\1\u0220"+
    "\10\u0221\1\u0222\2\u0221\11\u0220\5\u0221\13\u0223\4\u0221\31\u0223"+
    "\4\u0221\1\174\1\u0220\2\u0221\2\u02c5\3\0\14\u0221\1\u0222"+
    "\20\u0221\13\u0222\4\u0221\31\u0222\4\u0221\1\0\2\u0221\2\174"+
    "\7\0\1\174\13\0\11\174\5\0\13\174\4\0\17\174"+
    "\1\u02c6\11\174\4\0\2\174\1\0\3\u0299\3\0\111\u0299"+
    "\1\0\1\u0299\37\0\1\u02c7\27\0\1\u02c8\113\0\1\u02c9"+
    "\145\0\1\u02ca\121\0\1\u02cb\15\0\3\333\2\145\1\146"+
    "\107\333\1\u02cc\1\333\1\145\1\333\4\0\1\u02a0\116\0"+
    "\3\333\2\145\1\146\102\333\1\u02cd\6\333\1\145\1\333"+
    "\1\0\3\333\2\145\1\146\73\333\1\u02ce\15\333\1\145"+
    "\1\333\1\0\2\174\7\0\1\174\13\0\11\174\5\0"+
    "\13\174\4\0\5\174\1\u02cf\23\174\4\0\2\174\1\0"+
    "\1\u0272\1\u02a5\1\u02a6\3\0\3\u0273\1\u0272\13\u0273\11\u0272"+
    "\5\u0273\13\u0272\4\u0273\31\u0272\4\u0273\1\174\1\u0272\2\u0273"+
    "\2\u02a6\3\0\111\u0273\1\0\2\u0273\3\u02a7\6\0\1\u02a7"+
    "\1\0\1\u02a7\5\0\1\u02a7\1\0\1\u02a7\1\0\11\u02a7"+
    "\1\0\1\u02a7\1\0\1\u02d0\14\u02a7\4\0\31\u02a7\4\0"+
    "\2\u02a7\1\0\1\u02a8\1\u02d1\1\u02d2\6\0\1\u02a8\11\0"+
    "\1\u02d3\1\0\11\u02a8\1\0\1\u02d4\3\0\13\u02a8\1\u02d5"+
    "\3\0\31\u02a8\4\0\2\u02a8\1\0\3\u02d6\6\0\1\u02d6"+
    "\1\0\1\u02d6\5\0\1\u02d6\1\0\1\u02d6\1\0\11\u02d6"+
    "\1\0\1\u02d6\1\0\15\u02d6\4\0\31\u02d6\4\0\2\u02d6"+
    "\1\0\1\u02aa\1\u02d7\1\u02d2\6\0\1\u02aa\11\0\1\u02d3"+
    "\1\0\11\u02aa\1\0\1\u02d4\3\0\13\u02aa\1\u02d5\3\0"+
    "\31\u02aa\4\0\2\u02aa\1\0\1\u027d\2\u02ab\3\0\15\u027d"+
    "\1\u0242\73\u027d\1\0\2\u027d\2\u02ac\1\u02d8\6\0\1\u02ac"+
    "\11\0\1\u02d9\1\0\11\u02ac\5\0\13\u02ac\4\0\31\u02ac"+
    "\4\0\2\u02ac\1\0\1\174\1\u02ad\1\u02ae\6\0\1\174"+
    "\13\0\11\174\5\0\13\174\4\0\6\174\1\u02da\14\174"+
    "\1\u02db\5\174\4\0\2\174\2\0\2\u02ae\65\0\1\u02dc"+
    "\14\0\1\u02dd\14\0\1\u02de\1\u02af\1\u02b0\3\0\3\u02df"+
    "\1\u02e0\13\u02df\11\u02de\5\u02df\13\u02e0\4\u02df\31\u02e0\4\u02df"+
    "\1\174\1\u02e0\2\u02df\2\u02b0\3\0\3\u02df\1\u02e0\31\u02df"+
    "\13\u02e0\4\u02df\31\u02e0\4\u02df\1\0\1\u02e0\1\u02df\2\u02b1"+
    "\1\u02e1\6\0\1\u02b1\11\0\1\u0282\1\0\11\u02b1\1\0"+
    "\1\u02e2\3\0\13\u02b1\4\0\31\u02b1\4\0\2\u02b1\1\0"+
    "\1\174\1\u02b2\1\u02b3\6\0\1\u02e3\13\0\11\174\5\0"+
    "\13\u02e3\4\0\31\u02e3\4\0\1\174\1\u02e3\2\0\2\u02b3"+
    "\6\0\1\u02e3\31\0\13\u02e3\4\0\31\u02e3\5\0\1\u02e3"+
    "\1\0\2\174\7\0\1\174\13\0\11\174\5\0\13\174"+
    "\4\0\5\174\1\u0276\23\174\4\0\2\174\1\0\2\174"+
    "\7\0\1\174\13\0\11\174\5\0\13\174\4\0\22\174"+
    "\1\u02e4\6\174\4\0\2\174\1\0\1\174\1\u02e5\1\u02e6"+
    "\6\0\1\174\13\0\11\174\5\0\13\174\4\0\31\174"+
    "\1\217\3\0\2\174\1\0\1\u0221\2\u02e7\3\0\14\u0221"+
    "\1\u02b7\20\u0221\13\u02b7\4\u0221\31\u02b7\4\u0221\1\0\3\u0221"+
    "\2\u02e7\3\0\14\u0221\1\u02b7\20\u0221\13\u02b7\4\u0221\14\u02b7"+
    "\1\u02e8\14\u02b7\4\u0221\1\0\2\u0221\2\174\7\0\1\174"+
    "\13\0\11\174\5\0\13\174\4\0\22\174\1\u02e9\6\174"+
    "\4\0\2\174\1\0\1\174\1\u02ea\1\u02eb\6\0\1\174"+
    "\13\0\11\174\5\0\13\174\4\0\31\174\4\0\2\174"+
    "\1\0\2\174\7\0\1\174\13\0\11\174\5\0\13\174"+
    "\4\0\5\174\1\u02ec\23\174\4\0\2\174\1\0\1\u0220"+
    "\1\u02bc\1\u02bd\3\0\3\u0221\1\u0220\10\u0221\1\u02ed\2\u0221"+
    "\11\u0220\5\u0221\13\u02ee\4\u0221\1\u02ee\1\u02ef\27\u02ee\4\u0221"+
    "\1\174\1\u0220\2\u0221\2\u02bd\3\0\14\u0221\1\u02ed\20\u0221"+
    "\13\u02ed\4\u0221\1\u02ed\1\u02f0\27\u02ed\4\u0221\1\0\2\u0221"+
    "\1\u028f\2\u02be\3\0\13\u028f\1\u0254\1\u028f\1\u0254\73\u028f"+
    "\1\0\2\u028f\2\u02bf\1\u02f1\6\0\1\u02bf\7\0\1\u02f2"+
    "\1\0\1\u02f2\1\0\11\u02bf\5\0\13\u02bf\4\0\31\u02bf"+
    "\4\0\2\u02bf\1\0\1\u0291\2\u02c0\6\0\1\u0291\1\0"+
    "\1\u0291\5\0\1\u0291\1\0\1\u0291\1\0\11\u0291\1\0"+
    "\1\u0291\1\0\1\u02c0\14\u0291\1\u0258\3\0\31\u0291\4\0"+
    "\2\u0291\1\0\2\u02c1\1\u02f3\6\0\1\u02c1\1\0\1\u0259"+
    "\5\0\1\u0259\1\0\1\u0293\1\0\11\u02c1\1\0\1\u02f4"+
    "\1\0\1\u0293\1\u0259\13\u02c1\1\u0258\3\0\31\u02c1\4\0"+
    "\2\u02c1\1\0\2\174\7\0\1\174\11\0\1\u02f5\1\0"+
    "\11\u02c2\5\0\13\174\4\0\31\174\4\0\2\174\24\0"+
    "\1\u02f5\1\0\11\u02c3\64\0\1\u0220\1\u02c4\1\u02c5\3\0"+
    "\3\u0221\1\u0220\13\u0221\11\u0220\5\u0221\13\u0220\4\u0221\31\u0220"+
    "\4\u0221\1\174\1\u0220\2\u0221\2\u02c5\3\0\111\u0221\1\0"+
    "\2\u0221\2\174\7\0\1\174\13\0\11\174\5\0\13\174"+
    "\4\0\26\174\1\u02f6\2\174\4\0\2\174\61\0\1\u02f7"+
    "\134\0\1\u02f8\115\0\1\u02f9\121\0\1\u02fa\32\0\3\u02cc"+
    "\2\u02fb\1\u02fc\111\u02cc\1\u02fb\1\u02cc\1\0\3\333\2\145"+
    "\1\146\107\333\1\u02fd\1\333\1\145\1\333\1\0\3\333"+
    "\2\145\1\146\102\333\1\u02fe\6\333\1\145\1\333\1\0"+
    "\1\u02a7\2\u02d0\6\0\1\u02a7\1\0\1\u02a7\5\0\1\u02a7"+
    "\1\0\1\u02a7\1\0\11\u02a7\1\0\1\u02a7\1\0\1\u02d0"+
    "\14\u02a7\4\0\31\u02a7\4\0\2\u02a7\2\0\2\u02d2\20\0"+
    "\1\u02d3\13\0\1\u02d4\16\0\1\u02d5\44\0\2\u02d3\6\0"+
    "\1\u02aa\31\0\13\u02aa\4\0\31\u02aa\5\0\1\u02aa\1\0"+
    "\3\u02ff\6\0\1\u02ff\1\0\1\u02ff\5\0\1\u02ff\1\0"+
    "\1\u02ff\1\0\11\u02ff\1\0\1\u02ff\1\0\15\u02ff\4\0"+
    "\31\u02ff\4\0\2\u02ff\2\0\2\u02d5\55\0\1\u0300\41\0"+
    "\3\u02d6\6\0\1\u02d6\1\0\1\u02d6\5\0\1\u02d6\1\0"+
    "\1\u02d6\1\0\11\u02d6\1\0\1\u02d6\1\0\1\u0301\14\u02d6"+
    "\4\0\31\u02d6\4\0\2\u02d6\2\0\2\u02d8\20\0\1\u02d9"+
    "\77\0\2\u02d9\6\0\1\u02ac\31\0\13\u02ac\4\0\31\u02ac"+
    "\5\0\1\u02ac\1\0\2\174\7\0\1\174\13\0\11\174"+
    "\5\0\13\174\4\0\1\174\1\u0302\27\174\4\0\2\174"+
    "\1\0\2\174\7\0\1\174\13\0\11\174\5\0\13\174"+
    "\4\0\21\174\1\u0303\7\174\4\0\2\174\64\0\1\u0304"+
    "\141\0\1\u0305\16\0\2\u02de\1\u02df\3\0\3\u02df\1\u02de"+
    "\13\u02df\11\u02de\5\u02df\13\u02de\4\u02df\31\u02de\4\u02df\1\174"+
    "\1\u02de\4\u02df\3\0\111\u02df\1\0\2\u02df\2\u02e0\1\u0306"+
    "\3\0\3\u02df\1\u02e0\7\u02df\1\u02b0\1\u02df\1\u02b0\1\u02df"+
    "\11\u02e0\5\u02df\13\u02e0\4\u02df\31\u02e0\4\u02df\1\u0307\1\u02e0"+
    "\1\u02df\1\0\2\u02e1\20\0\1\u0282\13\0\1\u02e2\62\0"+
    "\3\u0308\6\0\1\u0308\1\0\1\u0308\5\0\1\u0308\1\0"+
    "\1\u0308\1\0\11\u0308\1\0\1\u0308\1\0\15\u0308\4\0"+
    "\31\u0308\4\0\2\u0308\1\0\2\u02e3\1\u0309\6\0\1\u02e3"+
    "\13\0\11\u02e3\5\0\13\u02e3\4\0\31\u02e3\4\0\2\u02e3"+
    "\1\0\1\174\1\u030a\1\u030b\6\0\1\174\13\0\11\174"+
    "\5\0\13\174\4\0\31\174\4\0\2\174\1\0\1\u030c"+
    "\1\u02e5\1\u02e6\3\0\3\u030d\1\u030e\13\u030d\11\u030c\5\u030d"+
    "\13\u030e\4\u030d\31\u030e\4\u030d\1\174\1\u030e\2\u030d\2\u02e6"+
    "\3\0\3\u030d\1\u030e\31\u030d\13\u030e\4\u030d\31\u030e\4\u030d"+
    "\1\0\1\u030e\1\u030d\1\u0221\2\u02e7\3\0\111\u0221\1\0"+
    "\3\u0221\2\u02e7\3\0\14\u0221\1\u02b7\20\u0221\13\u02b7\4\u0221"+
    "\14\u02b7\1\u030f\14\u02b7\4\u0221\1\0\2\u0221\2\174\7\0"+
    "\1\174\13\0\11\174\5\0\13\174\4\0\22\174\1\u0310"+
    "\6\174\4\0\2\174\1\0\1\u0311\1\u02ea\1\u02eb\3\0"+
    "\3\u0312\1\u0313\13\u0312\11\u0311\5\u0312\13\u0313\4\u0312\31\u0313"+
    "\4\u0312\1\174\1\u0313\2\u0312\2\u02eb\3\0\3\u0312\1\u0313"+
    "\31\u0312\13\u0313\4\u0312\31\u0313\4\u0312\1\0\1\u0313\1\u0312"+
    "\1\u0221\2\u0314\3\0\14\u0221\1\u02ed\20\u0221\13\u02ed\4\u0221"+
    "\31\u02ed\4\u0221\1\0\2\u0221\1\u0220\1\u0315\1\u0314\3\0"+
    "\3\u0221\1\u0220\10\u0221\1\u02ed\2\u0221\11\u0220\5\u0221\13\u02ee"+
    "\4\u0221\31\u02ee\4\u0221\1\174\1\u0220\1\u0221\1\u0220\1\u0315"+
    "\1\u0314\3\0\3\u0221\1\u0220\10\u0221\1\u02ed\2\u0221\11\u0220"+
    "\5\u0221\13\u02ee\4\u0221\14\u02ee\1\u0316\14\u02ee\4\u0221\1\174"+
    "\1\u0220\2\u0221\2\u0314\3\0\14\u0221\1\u02ed\20\u0221\13\u02ed"+
    "\4\u0221\14\u02ed\1\u0317\14\u02ed\4\u0221\1\0\2\u0221\1\0"+
    "\2\u02f1\16\0\1\u02f2\1\0\1\u02f2\77\0\2\u02f2\6\0"+
    "\1\u02bf\31\0\13\u02bf\4\0\31\u02bf\5\0\1\u02bf\1\0"+
    "\1\u0259\2\u02f3\6\0\1\u0259\1\0\1\u0259\5\0\1\u0259"+
    "\1\0\1\u0293\1\0\11\u0259\1\0\1\u02f4\1\0\1\u0293"+
    "\14\u0259\1\u0258\3\0\31\u0259\4\0\2\u0259\1\0\3\u0318"+
    "\6\0\1\u0318\1\0\1\u0318\5\0\1\u0318\1\0\1\u0318"+
    "\1\0\11\u0318\1\0\1\u0318\1\0\1\u0319\14\u0318\4\0"+
    "\31\u0318\4\0\2\u0318\26\0\11\u031a\64\0\1\174\1\u031b"+
    "\1\u031c\6\0\1\174\13\0\11\174\5\0\13\174\4\0"+
    "\31\174\1\217\3\0\2\174\72\0\1\u031d\66\0\1\u031e"+
    "\121\0\1\u031f\66\0\1\u02fb\116\0\3\u02fd\2\u0320\1\u0321"+
    "\111\u02fd\1\u0320\1\u02fd\1\0\3\333\2\145\1\146\107\333"+
    "\1\u0322\1\333\1\145\1\333\1\0\3\u02ff\6\0\1\u02ff"+
    "\1\0\1\u02ff\5\0\1\u02ff\1\0\1\u02ff\1\0\11\u02ff"+
    "\1\0\1\u02ff\1\0\1\u0323\14\u02ff\4\0\31\u02ff\4\0"+
    "\2\u02ff\2\0\2\u0324\53\0\1\u02d5\43\0\1\u02d6\2\u0301"+
    "\6\0\1\u0325\1\0\1\u02d6\5\0\1\u02d6\1\0\1\u02d6"+
    "\1\0\11\u02d6\1\0\1\u02d6\1\0\1\u0301\1\u02d6\13\u0325"+
    "\4\0\31\u0325\4\0\1\u02d6\1\u0325\1\0\2\174\7\0"+
    "\1\174\13\0\11\174\5\0\13\174\4\0\14\174\1\u0326"+
    "\14\174\4\0\2\174\1\0\2\174\7\0\1\174\13\0"+
    "\11\174\5\0\13\174\4\0\24\174\1\u0327\4\174\4\0"+
    "\2\174\77\0\1\u0328\131\0\1\u0329\13\0\1\u02df\2\u0306"+
    "\3\0\13\u02df\1\u02b0\1\u02df\1\u02b0\73\u02df\1\0\2\u02df"+
    "\2\u0307\1\u032a\6\0\1\u0307\7\0\1\u032b\1\0\1\u032b"+
    "\1\0\11\u0307\5\0\13\u0307\4\0\31\u0307\4\0\2\u0307"+
    "\1\0\3\u0308\6\0\1\u0308\1\0\1\u0308\5\0\1\u0308"+
    "\1\0\1\u0308\1\0\11\u0308\1\0\1\u0308\1\0\1\u032c"+
    "\14\u0308\4\0\31\u0308\4\0\2\u0308\2\0\2\u0309\117\0"+
    "\2\u030a\1\u030b\3\0\3\u030b\1\u030a\13\u030b\11\u030a\5\u030b"+
    "\13\u030a\4\u030b\31\u030a\4\u030b\1\174\1\u030a\1\0\3\u030b"+
    "\3\0\111\u030b\1\0\1\u030b\1\0\2\u030c\1\u030d\3\0"+
    "\3\u030d\1\u030c\13\u030d\11\u030c\5\u030d\13\u030c\4\u030d\31\u030c"+
    "\4\u030d\1\174\1\u030c\4\u030d\3\0\111\u030d\1\0\2\u030d"+
    "\2\u030e\1\u032d\3\0\3\u030d\1\u030e\7\u030d\1\u02e6\1\u030d"+
    "\1\u02e6\1\u030d\11\u030e\5\u030d\13\u030e\4\u030d\31\u030e\4\u030d"+
    "\1\u032e\1\u030e\1\u030d\1\u0221\2\u032f\3\0\14\u0221\1\u02b7"+
    "\20\u0221\13\u02b7\4\u0221\31\u02b7\4\u0221\1\0\2\u0221\2\174"+
    "\7\0\1\174\13\0\11\174\5\0\13\174\4\0\1\u0330"+
    "\30\174\4\0\2\174\1\0\2\u0311\1\u0312\3\0\3\u0312"+
    "\1\u0311\13\u0312\11\u0311\5\u0312\13\u0311\4\u0312\31\u0311\4\u0312"+
    "\1\174\1\u0311\4\u0312\3\0\111\u0312\1\0\2\u0312\2\u0313"+
    "\1\u0331\3\0\3\u0312\1\u0313\11\u0312\1\u02eb\1\u0312\11\u0313"+
    "\5\u0312\13\u0313\4\u0312\31\u0313\4\u0312\1\u0332\1\u0313\1\u0312"+
    "\1\u0221\2\u0314\3\0\111\u0221\1\0\2\u0221\1\u0220\1\u0315"+
    "\1\u0314\3\0\3\u0221\1\u0220\13\u0221\11\u0220\5\u0221\13\u0220"+
    "\4\u0221\31\u0220\4\u0221\1\174\1\u0220\1\u0221\1\u0220\1\u0315"+
    "\1\u0314\3\0\3\u0221\1\u0220\10\u0221\1\u02ed\2\u0221\11\u0220"+
    "\5\u0221\13\u02ee\4\u0221\14\u02ee\1\u0333\14\u02ee\4\u0221\1\174"+
    "\1\u0220\2\u0221\2\u0314\3\0\14\u0221\1\u02ed\20\u0221\13\u02ed"+
    "\4\u0221\14\u02ed\1\u0334\14\u02ed\4\u0221\1\0\2\u0221\3\u0318"+
    "\6\0\1\u0318\1\0\1\u0318\5\0\1\u0318\1\0\1\u0318"+
    "\1\0\11\u0318\1\0\1\u0318\1\0\1\u0335\14\u0318\4\0"+
    "\31\u0318\4\0\2\u0318\1\0\1\u0318\2\u0319\6\0\1\u0336"+
    "\1\0\1\u0318\5\0\1\u0318\1\0\1\u0318\1\0\11\u0318"+
    "\1\0\1\u0318\1\0\1\u0335\1\u0318\13\u0336\4\0\31\u0336"+
    "\4\0\1\u0318\1\u0336\24\0\1\u0337\1\0\11\u031a\64\0"+
    "\1\u0338\1\u031b\1\u031c\3\0\3\u0339\1\u033a\13\u0339\11\u0338"+
    "\5\u0339\13\u033a\4\u0339\31\u033a\4\u0339\1\174\1\u033a\2\u0339"+
    "\2\u031c\3\0\3\u0339\1\u033a\31\u0339\13\u033a\4\u0339\31\u033a"+
    "\4\u0339\1\0\1\u033a\1\u0339\73\0\1\u033b\106\0\1\u033c"+
    "\121\0\1\u033d\44\0\1\u0320\116\0\3\u0322\2\u033e\1\u033f"+
    "\111\u0322\1\u033e\1\u0322\1\0\1\u02ff\2\u0340\6\0\1\u02ff"+
    "\1\0\1\u02ff\5\0\1\u02ff\1\0\1\u02ff\1\0\11\u02ff"+
    "\1\0\1\u02ff\1\0\1\u0323\14\u02ff\1\u02d5\3\0\31\u02ff"+
    "\4\0\2\u02ff\1\0\1\u0325\1\u0341\1\u0342\6\0\1\u0325"+
    "\1\0\1\u02d6\5\0\1\u02d6\1\0\1\u0301\1\0\11\u0325"+
    "\1\0\1\u0343\1\0\1\u0301\1\u02d6\13\u0325\1\u02d5\3\0"+
    "\31\u0325\4\0\2\u0325\1\0\2\174\7\0\1\174\13\0"+
    "\11\174\5\0\13\174\4\0\22\174\1\u0344\6\174\4\0"+
    "\2\174\1\0\2\174\7\0\1\174\13\0\11\174\5\0"+
    "\13\174\4\0\5\174\1\u0345\23\174\4\0\2\174\105\0"+
    "\1\u0346\104\0\1\u0347\33\0\2\u032a\16\0\1\u032b\1\0"+
    "\1\u032b\77\0\2\u032b\6\0\1\u0307\31\0\13\u0307\4\0"+
    "\31\u0307\5\0\1\u0307\1\0\1\u0308\2\u032c\6\0\1\u0308"+
    "\1\0\1\u0308\5\0\1\u0308\1\0\1\u0308\1\0\11\u0308"+
    "\1\0\1\u0308\1\0\1\u032c\14\u0308\4\0\31\u0308\4\0"+
    "\2\u0308\1\0\1\u030d\2\u032d\3\0\13\u030d\1\u02e6\1\u030d"+
    "\1\u02e6\73\u030d\1\0\2\u030d\2\u032e\1\u0348\6\0\1\u032e"+
    "\7\0\1\u0349\1\0\1\u0349\1\0\11\u032e\5\0\13\u032e"+
    "\4\0\31\u032e\4\0\2\u032e\1\0\1\u0221\2\u032f\3\0"+
    "\111\u0221\1\0\2\u0221\2\174\7\0\1\174\13\0\11\174"+
    "\5\0\13\174\4\0\26\174\1\u034a\2\174\4\0\2\174"+
    "\1\0\1\u0312\2\u0331\3\0\15\u0312\1\u02eb\73\u0312\1\0"+
    "\2\u0312\2\u0332\1\u034b\6\0\1\u0332\11\0\1\u034c\1\0"+
    "\11\u0332\5\0\13\u0332\4\0\31\u0332\4\0\2\u0332\1\0"+
    "\1\u0220\1\u034d\1\u032f\3\0\3\u0221\1\u0220\10\u0221\1\u02ed"+
    "\2\u0221\11\u0220\5\u0221\13\u02ee\4\u0221\31\u02ee\4\u0221\1\174"+
    "\1\u0220\2\u0221\2\u032f\3\0\14\u0221\1\u02ed\20\u0221\13\u02ed"+
    "\4\u0221\31\u02ed\4\u0221\1\0\2\u0221\1\u0318\2\u0335\6\0"+
    "\1\u0336\1\0\1\u0318\5\0\1\u0318\1\0\1\u0318\1\0"+
    "\11\u0318\1\0\1\u0318\1\0\1\u0335\1\u0318\13\u0336\1\u0258"+
    "\3\0\31\u0336\4\0\1\u0318\1\u0336\1\0\2\u0336\1\u034e"+
    "\6\0\1\u0336\1\0\1\u0318\5\0\1\u0318\1\0\1\u0319"+
    "\1\0\11\u0336\1\0\1\u0318\1\0\1\u0335\1\u0318\13\u0336"+
    "\1\u0258\3\0\31\u0336\4\0\2\u0336\26\0\11\u034f\64\0"+
    "\2\u0338\1\u0339\3\0\3\u0339\1\u0338\13\u0339\11\u0338\5\u0339"+
    "\13\u0338\4\u0339\31\u0338\4\u0339\1\174\1\u0338\4\u0339\3\0"+
    "\111\u0339\1\0\2\u0339\2\u033a\1\u0350\3\0\3\u0339\1\u033a"+
    "\7\u0339\1\u031c\1\u0339\1\u031c\1\u0351\11\u033a\5\u0339\13\u033a"+
    "\4\u0339\31\u033a\4\u0339\1\u0352\1\u033a\1\u0339\105\0\1\u0353"+
    "\17\0\1\u033e\116\0\1\u02d6\2\u0342\6\0\1\u02d6\1\0"+
    "\1\u02d6\5\0\1\u02d6\1\0\1\u0301\1\0\11\u02d6\1\0"+
    "\1\u0343\1\0\1\u0301\14\u02d6\1\u02d5\3\0\31\u02d6\4\0"+
    "\2\u02d6\1\0\3\u0354\6\0\1\u0354\1\0\1\u0354\5\0"+
    "\1\u0354\1\0\1\u0354\1\0\11\u0354\1\0\1\u0354\1\0"+
    "\1\u0355\14\u0354\4\0\31\u0354\4\0\2\u0354\1\0\2\174"+
    "\7\0\1\174\13\0\11\174\5\0\13\174\4\0\5\174"+
    "\1\u0356\23\174\4\0\2\174\70\0\1\u0357\33\0\2\u0348"+
    "\16\0\1\u0349\1\0\1\u0349\77\0\2\u0349\6\0\1\u032e"+
    "\31\0\13\u032e\4\0\31\u032e\5\0\1\u032e\1\0\2\174"+
    "\7\0\1\174\13\0\11\174\5\0\13\174\4\0\1\174"+
    "\1\u0358\27\174\4\0\2\174\2\0\2\u034b\20\0\1\u034c"+
    "\77\0\2\u034c\6\0\1\u0332\31\0\13\u0332\4\0\31\u0332"+
    "\5\0\1\u0332\1\0\1\u0220\1\u034d\1\u032f\3\0\3\u0221"+
    "\1\u0220\13\u0221\11\u0220\5\u0221\13\u0220\4\u0221\31\u0220\4\u0221"+
    "\1\174\1\u0220\1\u0221\1\u0318\2\u034e\6\0\1\u0318\1\0"+
    "\1\u0318\5\0\1\u0318\1\0\1\u0319\1\0\11\u0318\1\0"+
    "\1\u0318\1\0\1\u0335\14\u0318\1\u0258\3\0\31\u0318\4\0"+
    "\2\u0318\1\0\1\u0339\2\u0350\3\0\13\u0339\1\u031c\1\u0339"+
    "\1\u031c\1\u0351\72\u0339\1\0\5\u0339\3\0\11\u0339\1\u0359"+
    "\4\u0339\1\u035a\72\u0339\1\0\2\u0339\2\u0352\1\u035b\6\0"+
    "\1\u0352\7\0\1\u035c\1\0\1\u035c\1\u035d\11\u0352\5\0"+
    "\13\u0352\4\0\31\u0352\4\0\2\u0352\37\0\1\u035e\63\0"+
    "\3\u0354\6\0\1\u0354\1\0\1\u0354\5\0\1\u0354\1\0"+
    "\1\u0354\1\0\11\u0354\1\0\1\u0354\1\0\1\u035f\14\u0354"+
    "\4\0\31\u0354\4\0\2\u0354\1\0\1\u0354\2\u0355\6\0"+
    "\1\u0360\1\0\1\u0354\5\0\1\u0354\1\0\1\u0354\1\0"+
    "\11\u0354\1\0\1\u0354\1\0\1\u035f\1\u0354\13\u0360\4\0"+
    "\31\u0360\4\0\1\u0354\1\u0360\1\0\2\174\7\0\1\174"+
    "\13\0\11\174\5\0\13\174\4\0\21\174\1\u0361\7\174"+
    "\4\0\2\174\1\0\3\u0359\3\u0362\11\u0359\1\u0363\77\u0359"+
    "\1\u0362\2\u0359\3\u035a\2\u0364\1\u0365\111\u035a\1\u0364\1\u035a"+
    "\1\u0339\1\0\2\u035b\16\0\1\u035c\1\0\1\u035c\1\u035d"+
    "\76\0\2\u035c\6\0\1\u0352\31\0\13\u0352\4\0\31\u0352"+
    "\5\0\1\u0352\20\0\1\u0362\4\0\1\u0366\155\0\1\u0367"+
    "\41\0\1\u0354\2\u0368\6\0\1\u0360\1\0\1\u0354\5\0"+
    "\1\u0354\1\0\1\u0354\1\0\11\u0354\1\0\1\u0354\1\0"+
    "\1\u035f\1\u0354\13\u0360\1\u02d5\3\0\31\u0360\4\0\1\u0354"+
    "\1\u0360\1\0\1\u0360\1\u0369\1\u036a\6\0\1\u0360\1\0"+
    "\1\u0354\5\0\1\u0354\1\0\1\u0355\1\0\11\u0360\1\0"+
    "\1\u0354\1\0\1\u035f\1\u0354\13\u0360\1\u02d5\3\0\31\u0360"+
    "\4\0\2\u0360\1\0\2\174\7\0\1\174\13\0\11\174"+
    "\5\0\13\174\4\0\16\174\1\u036b\12\174\4\0\2\174"+
    "\1\0\17\u0362\1\u036c\102\u0362\3\u0359\3\u0362\11\u0359\1\u0363"+
    "\4\u0359\1\u036d\72\u0359\1\u0362\2\u0359\3\0\1\u0364\116\0"+
    "\3\u0366\2\u0364\1\u0365\111\u0366\1\u0364\1\u0366\1\0\1\u0354"+
    "\2\u036a\6\0\1\u0354\1\0\1\u0354\5\0\1\u0354\1\0"+
    "\1\u0355\1\0\11\u0354\1\0\1\u0354\1\0\1\u035f\14\u0354"+
    "\1\u02d5\3\0\31\u0354\4\0\2\u0354\1\0\2\174\7\0"+
    "\1\174\13\0\11\174\5\0\13\174\4\0\11\174\1\u036e"+
    "\17\174\4\0\2\174\1\0\17\u0362\1\u036c\4\u0362\1\u0364"+
    "\75\u0362\2\174\7\0\1\174\13\0\11\174\5\0\13\174"+
    "\4\0\16\174\1\u036f\12\174\4\0\2\174\1\0\2\174"+
    "\7\0\1\174\13\0\11\174\5\0\13\174\4\0\7\174"+
    "\1\u0370\21\174\4\0\2\174\1\0\2\174\7\0\1\174"+
    "\13\0\11\174\5\0\13\174\4\0\22\174\1\u0371\6\174"+
    "\4\0\2\174\1\0\1\174\1\u0371\1\u0372\6\0\1\174"+
    "\13\0\11\174\5\0\13\174\4\0\31\174\4\0\2\174"+
    "\2\0\2\u0372\117\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[59204];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\23\0\1\1\1\11\5\1\1\11\1\1\1\11\14\1"+
    "\1\11\3\1\2\11\3\1\1\11\3\1\10\11\2\1"+
    "\1\11\2\1\1\11\2\1\1\11\4\1\2\11\1\1"+
    "\1\11\2\1\1\11\1\1\1\11\5\1\1\11\4\1"+
    "\2\11\4\1\1\11\2\1\1\11\2\1\1\11\1\1"+
    "\1\11\3\1\1\11\1\1\1\11\2\1\3\0\2\11"+
    "\1\0\1\1\3\0\17\1\1\0\1\11\1\0\1\11"+
    "\3\1\2\0\1\11\1\1\5\0\1\1\1\11\2\0"+
    "\1\11\2\1\1\11\1\1\2\11\1\1\5\11\1\1"+
    "\3\11\1\1\1\11\1\1\2\0\1\1\1\0\1\11"+
    "\1\1\10\0\2\11\3\1\5\11\2\1\3\0\3\11"+
    "\1\1\1\0\2\11\6\0\4\1\1\0\2\11\1\1"+
    "\3\0\36\1\1\11\7\1\12\0\1\11\4\0\1\11"+
    "\2\0\2\11\5\0\1\11\2\0\1\11\1\0\2\11"+
    "\3\0\1\11\3\1\4\0\26\1\1\0\17\1\10\0"+
    "\1\11\1\0\1\11\1\0\1\11\5\0\1\11\3\0"+
    "\2\1\2\0\2\11\33\1\1\0\17\1\22\0\2\1"+
    "\1\0\1\11\27\1\1\0\10\1\1\0\7\1\11\0"+
    "\1\1\2\0\1\1\2\0\1\11\1\1\3\0\2\11"+
    "\1\0\6\1\1\0\17\1\1\0\10\1\1\0\12\1"+
    "\2\0\1\1\12\0\1\11\1\1\1\0\24\1\1\0"+
    "\10\1\4\0\7\1\2\11\7\0\2\1\4\0\10\1"+
    "\1\0\1\1\1\0\7\1\1\0\16\1\1\0\1\1"+
    "\1\0\1\1\1\0\4\1\1\11\5\0\1\11\1\1"+
    "\2\0\3\1\1\0\1\1\2\0\3\1\1\0\4\1"+
    "\1\0\23\1\2\0\1\11\5\0\4\1\4\0\2\1"+
    "\1\0\2\1\2\0\4\1\1\0\17\1\1\0\1\1"+
    "\2\0\1\1\1\11\3\0\1\11\1\1\5\0\2\1"+
    "\2\0\2\1\1\0\17\1\2\0\3\1\3\0\1\11"+
    "\1\1\2\0\1\1\1\0\2\1\2\0\1\1\1\0"+
    "\13\1\1\0\3\1\1\0\3\11\4\1\1\0\2\1"+
    "\1\0\1\11\1\1\1\0\2\1\1\0\6\1\3\0"+
    "\1\1\1\11\4\1\5\0\1\1\1\0\1\1\1\11"+
    "\1\1\1\0\1\11\4\1\1\0\6\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[882];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** the stack of open (nested) input streams to read from */
  private java.util.Deque<ZzFlexStreamInfo> zzStreams
    = new java.util.ArrayDeque<ZzFlexStreamInfo>();

  /**
   * inner class used to store info for nested
   * input streams
   */
  private static final class ZzFlexStreamInfo {
    java.io.Reader zzReader;
    int zzEndRead;
    int zzStartRead;
    int zzCurrentPos;
    int zzMarkedPos;
    int yyline;
    long yychar;
    int yycolumn;
    char [] zzBuffer;
    boolean zzAtBOL;
    boolean zzAtEOF;
    boolean zzEOFDone;
    int zzFinalHighSurrogate;

    /** sets all values stored in this class */
    ZzFlexStreamInfo(java.io.Reader zzReader, int zzEndRead, int zzStartRead,
                  int zzCurrentPos, int zzMarkedPos, char [] zzBuffer,
                  boolean zzAtBOL, boolean zzAtEOF, boolean zzEOFDone,
                  int zzFinalHighSurrogate, int yyline, long yychar,
                  int yycolumn) {
      this.zzReader      = zzReader;
      this.zzEndRead     = zzEndRead;
      this.zzStartRead   = zzStartRead;
      this.zzCurrentPos  = zzCurrentPos;
      this.zzMarkedPos   = zzMarkedPos;
      this.zzBuffer      = zzBuffer;
      this.zzAtBOL       = zzAtBOL;
      this.zzAtEOF       = zzAtEOF;
      this.zzEOFDone     = zzEOFDone;
      this.zzFinalHighSurrogate = zzFinalHighSurrogate;
      this.yyline        = yyline;
      this.yychar        = yychar;
      this.yycolumn      = yycolumn;
    }
  }

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;

  /* user code: */

  int balance = 0;
  int commentbalance = 0;
  int action_line = 0;
  StringBuilder actionText = new StringBuilder();

  boolean isYYEOF;
  boolean notUnix;
  boolean caseless;
  boolean inclusive_states;

  int nextState;

  boolean macroDefinition;

  Timer t = new Timer();

  @Override
  protected int lexLine() {
    return yyline;
  }

  @Override
  protected int lexColumn() {
    return yycolumn;
  }

  @Override
  protected String lexText() {
    return yytext();
  }

  @Override
  protected int lexLength() {
    return yylength();
  }

  @Override
  protected void lexPushback(int n) {
    yypushback(n);
  }

  @Override
  protected void lexPushStream(File f) throws IOException {
    // yypushStream in skeleton.nested
    yypushStream(Files.newBufferedReader(f.toPath(), Options.encoding));
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public LexScan(java.io.Reader in) {
    states.insert("YYINITIAL", true);
    this.zzReader = in;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length * 2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;           // indicate end of file
    zzEndRead = zzStartRead;  // invalidate buffer

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Stores the current input stream on a stack, and
   * reads from a new stream. Lexical state, line,
   * char, and column counting remain untouched.
   *
   * The current input stream can be restored with
   * yypopStream (usually in an {@code <<EOF>>} action).
   *
   * @param reader the new input stream to read from
   *
   * @see #yypopStream()
   */
  public final void yypushStream(java.io.Reader reader) {
    zzStreams.push(
      new ZzFlexStreamInfo(zzReader, zzEndRead, zzStartRead, zzCurrentPos,
                        zzMarkedPos, zzBuffer, zzAtBOL, zzAtEOF, zzEOFDone,
                        zzFinalHighSurrogate, yyline, yychar, yycolumn)
    );
    zzBuffer = new char[ZZ_BUFFERSIZE];
    zzReader = reader;
    yyResetPosition();
  }


  /**
   * Closes the current input stream and continues to
   * read from the one on top of the stream stack.
   *
   * @throws java.util.NoSuchElementException
   *         if there is no further stream to read from.
   *
   * @throws java.io.IOException
   *         if there was an error in closing the stream.
   *
   * @see #yypushStream(java.io.Reader)
   */
  public final void yypopStream() throws java.io.IOException {
    zzReader.close();
    ZzFlexStreamInfo s = (ZzFlexStreamInfo) zzStreams.pop();
    zzBuffer      = s.zzBuffer;
    zzReader      = s.zzReader;
    zzEndRead     = s.zzEndRead;
    zzStartRead   = s.zzStartRead;
    zzCurrentPos  = s.zzCurrentPos;
    zzMarkedPos   = s.zzMarkedPos;
    zzAtBOL       = s.zzAtBOL;
    zzAtEOF       = s.zzAtEOF;
    zzEOFDone     = s.zzEOFDone;
    zzFinalHighSurrogate = s.zzFinalHighSurrogate;
    yyline        = s.yyline;
    yychar        = s.yychar;
    yycolumn      = s.yycolumn;
  }


  /**
   * Returns true iff there are still streams left
   * to read from on the stream stack.
   */
  public final boolean yymoreStreams() {
    return !zzStreams.isEmpty();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to {@code ZZ_INITIAL}.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream
   *
   * @see #yypushStream(java.io.Reader)
   * @see #yypopStream()
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE) {
      zzBuffer = new char[ZZ_BUFFERSIZE];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }

  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
  yyclose();    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      // cached fields:
      int zzCurrentPosL;
      int zzMarkedPosL = zzMarkedPos;
      int zzEndReadL = zzEndRead;
      char [] zzBufferL = zzBuffer;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      if (zzMarkedPosL > zzStartRead) {
        switch (zzBufferL[zzMarkedPosL-1]) {
        case '\n':
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':  // fall through
          zzAtBOL = true;
          break;
        case '\r': 
          if (zzMarkedPosL < zzEndReadL)
            zzAtBOL = zzBufferL[zzMarkedPosL] != '\n';
          else if (zzAtEOF)
            zzAtBOL = false;
          else {
            boolean eof = zzRefill();
            zzMarkedPosL = zzMarkedPos;
            zzEndReadL = zzEndRead;
            zzBufferL = zzBuffer;
            if (eof) 
              zzAtBOL = false;
            else 
              zzAtBOL = zzBufferL[zzMarkedPosL] != '\n';
          }
          break;
        default:
          zzAtBOL = false;
        }
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      if (zzAtBOL)
        zzState = ZZ_LEXSTATE[zzLexicalState+1];
      else
        zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
            switch (zzLexicalState) {
            case YYINITIAL: {
              return symbol(sym.EOF);
            }  // fall though
            case 883: break;
            case COMMENT: {
              throw new ScannerException(file,ErrorMessages.EOF_IN_COMMENT);
            }  // fall though
            case 884: break;
            case STATELIST: {
              throw new ScannerException(file,ErrorMessages.EOF_IN_MACROS);
            }  // fall though
            case 885: break;
            case MACROS: {
              if ( yymoreStreams() ) {
                                  file = popFile();
                                  yypopStream();
                                }
                                else
                                  throw new ScannerException(file,ErrorMessages.EOF_IN_MACROS);
            }  // fall though
            case 886: break;
            case JAVA_CODE: {
              throw new ScannerException(file,ErrorMessages.EOF_IN_ACTION, action_line-1);
            }  // fall though
            case 887: break;
            case STATES: {
              throw new ScannerException(file,ErrorMessages.EOF_IN_STATES);
            }  // fall though
            case 888: break;
            case STRING_CONTENT: {
              throw new ScannerException(file,ErrorMessages.EOF_IN_STRING);
            }  // fall though
            case 889: break;
            case CHARCLASS: {
              throw new ScannerException(file,ErrorMessages.EOF_IN_REGEXP);
            }  // fall though
            case 890: break;
            case COPY: {
              throw new ScannerException(file,ErrorMessages.EOF_IN_MACROS);
            }  // fall though
            case 891: break;
            case REPEATEXP: {
              throw new ScannerException(file,ErrorMessages.EOF_IN_REGEXP);
            }  // fall though
            case 892: break;
            case REGEXP_CODEPOINT_SEQUENCE: {
              throw new ScannerException(file,ErrorMessages.EOF_IN_REGEXP);
            }  // fall though
            case 893: break;
            case STRING_CODEPOINT_SEQUENCE: {
              throw new ScannerException(file,ErrorMessages.EOF_IN_STRING);
            }  // fall though
            case 894: break;
            case CHARCLASS_CODEPOINT: {
              throw new ScannerException(file,ErrorMessages.EOF_IN_REGEXP);
            }  // fall though
            case 895: break;
            default:
              {
                if ( yymoreStreams() ) {
             file = popFile();
             yypopStream();
           }
           else {
             return symbol(sym.EOF);
           }
              }
        }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { userCode.append(yytext());
            }
            // fall through
          case 180: break;
          case 2:
            { /* ignore */
            }
            // fall through
          case 181: break;
          case 3:
            { throw new ScannerException(file,ErrorMessages.UNEXPECTED_CHAR, yyline, yycolumn);
            }
            // fall through
          case 182: break;
          case 4:
            { 
            }
            // fall through
          case 183: break;
          case 5:
            { yybegin(MACROS);
            }
            // fall through
          case 184: break;
          case 6:
            { states.insert(yytext(),inclusive_states);
            }
            // fall through
          case 185: break;
          case 7:
            { return symbol(sym.IDENT, yytext());
            }
            // fall through
          case 186: break;
          case 8:
            { throw new ScannerException(file,ErrorMessages.UNKNOWN_OPTION, yyline, yycolumn);
            }
            // fall through
          case 187: break;
          case 9:
            { yybegin(REGEXP);
                                return symbol(sym.EQUALS);
            }
            // fall through
          case 188: break;
          case 10:
            { yybegin(STATES); return symbol_countUpdate(sym.LESSTHAN, null);
            }
            // fall through
          case 189: break;
          case 11:
            { return symbol_countUpdate(sym.RBRACE, null);
            }
            // fall through
          case 190: break;
          case 12:
            { yypushback(yylength()); yybegin(REGEXP);
            }
            // fall through
          case 191: break;
          case 13:
            { return symbol(sym.CHAR, yytext().codePointAt(0));
            }
            // fall through
          case 192: break;
          case 14:
            { if (macroDefinition) { yybegin(MACROS); } return symbol(sym.REGEXPEND);
            }
            // fall through
          case 193: break;
          case 15:
            { return symbol(sym.BANG);
            }
            // fall through
          case 194: break;
          case 16:
            { string.setLength(0); nextState = REGEXP; yybegin(STRING_CONTENT);
            }
            // fall through
          case 195: break;
          case 17:
            { return symbol(sym.DOLLAR);
            }
            // fall through
          case 196: break;
          case 18:
            { return symbol(sym.OPENBRACKET);
            }
            // fall through
          case 197: break;
          case 19:
            { return symbol(sym.CLOSEBRACKET);
            }
            // fall through
          case 198: break;
          case 20:
            { return symbol(sym.STAR);
            }
            // fall through
          case 199: break;
          case 21:
            { return symbol(sym.PLUS);
            }
            // fall through
          case 200: break;
          case 22:
            { return symbol(sym.POINT);
            }
            // fall through
          case 201: break;
          case 23:
            { return symbol(sym.LOOKAHEAD);
            }
            // fall through
          case 202: break;
          case 24:
            { return symbol(sym.QUESTION);
            }
            // fall through
          case 203: break;
          case 25:
            { yybegin(CHARCLASS); return symbol(sym.OPENCLASS);
            }
            // fall through
          case 204: break;
          case 26:
            { bolUsed = true; return symbol(sym.HAT);
            }
            // fall through
          case 205: break;
          case 27:
            { yybegin(REGEXPSTART); return symbol(sym.LBRACE);
            }
            // fall through
          case 206: break;
          case 28:
            { return symbol(sym.BAR);
            }
            // fall through
          case 207: break;
          case 29:
            { return symbol(sym.TILDE);
            }
            // fall through
          case 208: break;
          case 30:
            { actionText.append(yytext());
            }
            // fall through
          case 209: break;
          case 31:
            { balance++; actionText.append('{');
            }
            // fall through
          case 210: break;
          case 32:
            { if (balance > 0) {
                 balance--;
                 actionText.append('}');
               }
               else {
                 yybegin(REGEXPSTART);
                 Action a = new Action(actionText.toString(), action_line);
                 actions.add(a);
                 return symbol(sym.ACTION, a);
               }
            }
            // fall through
          case 211: break;
          case 33:
            { return symbol(sym.COMMA);
            }
            // fall through
          case 212: break;
          case 34:
            { yybegin(REGEXP); return symbol(sym.MORETHAN);
            }
            // fall through
          case 213: break;
          case 35:
            { string.append(yytext());
            }
            // fall through
          case 214: break;
          case 36:
            { throw new ScannerException(file,ErrorMessages.UNTERMINATED_STR, yyline, yycolumn);
            }
            // fall through
          case 215: break;
          case 37:
            { yybegin(nextState); return symbol(sym.STRING, string.toString());
            }
            // fall through
          case 216: break;
          case 38:
            { throw new ScannerException(file,ErrorMessages.EOL_IN_CHARCLASS,yyline,yycolumn);
            }
            // fall through
          case 217: break;
          case 39:
            { throw new ScannerException(file,ErrorMessages.UNEXPECTED_NL, yyline, yycolumn);
            }
            // fall through
          case 218: break;
          case 40:
            { string.setLength(0); nextState = CHARCLASS; yybegin(STRING_CONTENT);
            }
            // fall through
          case 219: break;
          case 41:
            { return symbol(sym.DASH);
            }
            // fall through
          case 220: break;
          case 42:
            { balance++; return symbol(sym.OPENCLASS);
            }
            // fall through
          case 221: break;
          case 43:
            { if (balance > 0) balance--; else yybegin(REGEXP); return symbol(sym.CLOSECLASS);
            }
            // fall through
          case 222: break;
          case 44:
            { return symbol(sym.HAT);
            }
            // fall through
          case 223: break;
          case 45:
            { yybegin(REGEXP); return symbol(sym.RBRACE);
            }
            // fall through
          case 224: break;
          case 46:
            { yybegin(REGEXP);
            }
            // fall through
          case 225: break;
          case 47:
            { throw new ScannerException(file,ErrorMessages.CTOR_ARG,yyline,yycolumn);
            }
            // fall through
          case 226: break;
          case 48:
            { yybegin(MACROS); ctorArgs.add(yytext().trim());
            }
            // fall through
          case 227: break;
          case 49:
            { int codePoint = Integer.parseInt(yytext(), 16);
                    if (codePoint <= getMaximumCodePoint()) {
                      string.append(Character.toChars(codePoint));
                    } else {
                      throw new ScannerException(file,ErrorMessages.CODEPOINT_OUT_OF_RANGE, yyline, yycolumn);
                    }
            }
            // fall through
          case 228: break;
          case 50:
            { yybegin(REGEXP); return symbol(sym.STRING, string.toString());
            }
            // fall through
          case 229: break;
          case 51:
            { int codePoint = Integer.parseInt(yytext(), 16);
                    if (codePoint <= getMaximumCodePoint()) {
                      string.append(Character.toChars(codePoint));
                    } else {
                      throw new ScannerException(file, ErrorMessages.CODEPOINT_OUT_OF_RANGE, yyline, yycolumn);
                    }
            }
            // fall through
          case 230: break;
          case 52:
            { yybegin(STRING_CONTENT);
            }
            // fall through
          case 231: break;
          case 53:
            { t.start();
                             yybegin(MACROS);
                             macroDefinition = true;
                             return symbol(sym.USERCODE,userCode);
            }
            // fall through
          case 232: break;
          case 54:
            { if (commentbalance > 0)
                commentbalance--;
              else
                yybegin(nextState);
            }
            // fall through
          case 233: break;
          case 55:
            { commentbalance++;
            }
            // fall through
          case 234: break;
          case 56:
            { nextState = MACROS; yybegin(COMMENT);
            }
            // fall through
          case 235: break;
          case 57:
            { Out.warning(ErrorMessages.NOT_AT_BOL, yyline); yypushback(1);
            }
            // fall through
          case 236: break;
          case 58:
            { macroDefinition = false;
                                yybegin(REGEXPSTART);
                                return symbol(sym.DELIMITER);
            }
            // fall through
          case 237: break;
          case 59:
            { nextState = REGEXPSTART; yybegin(COMMENT);
            }
            // fall through
          case 238: break;
          case 60:
            { actionText.setLength(0); yybegin(JAVA_CODE); action_line = yyline+1; return symbol(sym.REGEXPEND);
            }
            // fall through
          case 239: break;
          case 61:
            { nextState = REGEXP; yybegin(COMMENT);
            }
            // fall through
          case 240: break;
          case 62:
            { return symbol(sym.CHAR, yytext().codePointAt(1));
            }
            // fall through
          case 241: break;
          case 63:
            { return symbol(sym.CHAR, Integer.parseInt(yytext().substring(1,yylength()), 8));
            }
            // fall through
          case 242: break;
          case 64:
            { return symbol(sym.DIGITCLASSNOT);
            }
            // fall through
          case 243: break;
          case 65:
            { return symbol(sym.NEWLINE);
            }
            // fall through
          case 244: break;
          case 66:
            { return symbol(sym.WHITESPACECLASSNOT);
            }
            // fall through
          case 245: break;
          case 67:
            { return symbol(sym.WORDCLASSNOT);
            }
            // fall through
          case 246: break;
          case 68:
            { return symbol(sym.CHAR, (int)'\b');
            }
            // fall through
          case 247: break;
          case 69:
            { return symbol(sym.DIGITCLASS);
            }
            // fall through
          case 248: break;
          case 70:
            { return symbol(sym.CHAR, (int)'\f');
            }
            // fall through
          case 249: break;
          case 71:
            { return symbol(sym.CHAR, (int)'\n');
            }
            // fall through
          case 250: break;
          case 72:
            { return symbol(sym.CHAR, (int)'\r');
            }
            // fall through
          case 251: break;
          case 73:
            { return symbol(sym.WHITESPACECLASS);
            }
            // fall through
          case 252: break;
          case 74:
            { return symbol(sym.CHAR, (int)'\t');
            }
            // fall through
          case 253: break;
          case 75:
            { return symbol(sym.WORDCLASS);
            }
            // fall through
          case 254: break;
          case 76:
            { yybegin(REPEATEXP);
                                   return symbol(sym.REPEAT,
                                                 Integer.valueOf(yytext().trim().substring(1).trim()));
            }
            // fall through
          case 255: break;
          case 77:
            // lookahead expression with fixed lookahead length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, zzEndRead - zzStartRead, zzMarkedPos, -1);
            { if (macroDefinition) {
                              yybegin(EATWSPNL);
                              return symbol(sym.BAR);
                            }
                            else {
                              yybegin(REGEXPSTART);
                              return symbol(sym.NOACTION);
                            }
            }
            // fall through
          case 256: break;
          case 78:
            { string.append(yytext().substring(1, yytext().offsetByCodePoints(1, 1)));
            }
            // fall through
          case 257: break;
          case 79:
            { string.append('\"');
            }
            // fall through
          case 258: break;
          case 80:
            { string.append( (char) Integer.parseInt(yytext().substring(1,yylength()), 8));
            }
            // fall through
          case 259: break;
          case 81:
            { string.append('\b');
            }
            // fall through
          case 260: break;
          case 82:
            { string.append('\f');
            }
            // fall through
          case 261: break;
          case 83:
            { string.append('\n');
            }
            // fall through
          case 262: break;
          case 84:
            { string.append('\r');
            }
            // fall through
          case 263: break;
          case 85:
            { string.append('\t');
            }
            // fall through
          case 264: break;
          case 86:
            { return symbol(sym.INTERSECTION);
            }
            // fall through
          case 265: break;
          case 87:
            { return symbol(sym.DIFFERENCE);
            }
            // fall through
          case 266: break;
          case 88:
            { yypushback(1); yycolumn--; return symbol(sym.CHAR, (int)'-');
            }
            // fall through
          case 267: break;
          case 89:
            { /* union is the default operation - '||' can be ignored */
            }
            // fall through
          case 268: break;
          case 90:
            { return symbol(sym.SYMMETRICDIFFERENCE);
            }
            // fall through
          case 269: break;
          case 91:
            { return symbol(sym.REPEAT, Integer.valueOf(yytext().substring(1).trim()));
            }
            // fall through
          case 270: break;
          case 92:
            { int codePoint = Integer.parseInt(yytext().substring(0, yylength() - 1), 16);
                        if (codePoint <= getMaximumCodePoint()) {
                          yybegin(CHARCLASS);
                          return symbol(sym.CHAR, codePoint);
                        } else {
                          throw new ScannerException(file, ErrorMessages.CODEPOINT_OUT_OF_RANGE, yyline, yycolumn);
                        }
            }
            // fall through
          case 271: break;
          case 93:
            { string.setLength(0); yybegin(COPY);
            }
            // fall through
          case 272: break;
          case 94:
            { inclusive_states = true; yybegin(STATELIST);
            }
            // fall through
          case 273: break;
          case 95:
            { inclusive_states = false; yybegin(STATELIST);
            }
            // fall through
          case 274: break;
          case 96:
            { string.setLength(0); yybegin(REGEXP_CODEPOINT_SEQUENCE);
            }
            // fall through
          case 275: break;
          case 97:
            { return symbol_countUpdate(sym.MACROUSE, makeMacroIdent());
            }
            // fall through
          case 276: break;
          case 98:
            // lookahead expression with fixed lookahead length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, zzEndRead - zzStartRead, zzMarkedPos, -2);
            { if (macroDefinition) {
                              yybegin(EATWSPNL);
                              return symbol(sym.BAR);
                            }
                            else {
                              yybegin(REGEXPSTART);
                              return symbol(sym.NOACTION);
                            }
            }
            // fall through
          case 277: break;
          case 99:
            { yybegin(STRING_CODEPOINT_SEQUENCE);
            }
            // fall through
          case 278: break;
          case 100:
            { yybegin(CHARCLASS_CODEPOINT);
            }
            // fall through
          case 279: break;
          case 101:
            { return symbol(sym.MACROUSE, yytext().substring(1,yylength()-1));
            }
            // fall through
          case 280: break;
          case 102:
            { classCode = conc(classCode,string);  yybegin(MACROS);
            }
            // fall through
          case 281: break;
          case 103:
            { cupCompatible = true;
                                isImplementing = concExc(isImplementing, "java_cup.runtime.Scanner");
                                if (functionName == null)
                                  functionName = "next_token";
                                if (tokenType == null)
                                  tokenType = "java_cup.runtime.Symbol";
                                if (eofVal == null)
                                  eofVal = "return new java_cup.runtime.Symbol("+cupSymbol+".EOF);";
                                if (!Options.jlex) eofclose = true;
            }
            // fall through
          case 282: break;
          case 104:
            { isInteger = true;
            }
            // fall through
          case 283: break;
          case 105:
            { String trimmedText = yytext().trim();
                                 String propertyValue = trimmedText.substring(3,trimmedText.length()-1);
                                 IntCharSet set = getIntCharSet(propertyValue);
                                 if (null == set) {
                                   throw new ScannerException(file,ErrorMessages.INVALID_UNICODE_PROPERTY, yyline, yycolumn + 3);
                                 }
                                 return symbol(sym.UNIPROPCCLASSNOT, propertyValue);
            }
            // fall through
          case 284: break;
          case 106:
            { String trimmedText = yytext().trim();
                                 String propertyValue = trimmedText.substring(3,trimmedText.length()-1);
                                 IntCharSet set = getIntCharSet(propertyValue);
                                 if (null == set) {
                                   throw new ScannerException(file,ErrorMessages.INVALID_UNICODE_PROPERTY, yyline, yycolumn + 3);
                                 }
                                 return symbol(sym.UNIPROPCCLASS, propertyValue);
            }
            // fall through
          case 285: break;
          case 107:
            { return symbol(sym.CHAR, Integer.parseInt(yytext().substring(2,yylength()), 16));
            }
            // fall through
          case 286: break;
          case 108:
            { string.append( (char) Integer.parseInt(yytext().substring(2,yylength()), 16));
            }
            // fall through
          case 287: break;
          case 109:
            { initCharClasses(CharSetSize.SEVEN_BIT);
            }
            // fall through
          case 288: break;
          case 110:
            { initCharClasses(CharSetSize.EIGHT_BIT);
            }
            // fall through
          case 289: break;
          case 111:
            { charCount = true;
            }
            // fall through
          case 290: break;
          case 112:
            { cup2Compatible = true;
                                isImplementing = concExc(isImplementing, "Scanner");
                                lineCount = true;
                                columnCount = true;
                                if (functionName == null)
                                  functionName = "readNextTerminal";
                                if (tokenType == null)
                                  tokenType = "ScannerToken<? extends Object>";
                                if (eofVal == null)
                                  eofVal = "return token(SpecialTerminals.EndOfInputStream);";
                                if (!Options.jlex) eofclose = true;
                                // %unicode:
                                initCharClasses(CharSetSize.UNICODE);
            }
            // fall through
          case 291: break;
          case 113:
            { lineCount = true;
            }
            // fall through
          case 292: break;
          case 114:
            { /* no-op - this is the only generation method */
            }
            // fall through
          case 293: break;
          case 115:
            { initCharClasses(CharSetSize.UNICODE);
            }
            // fall through
          case 294: break;
          case 116:
            { debugOption = true;
            }
            // fall through
          case 295: break;
          case 117:
            { isFinal = true;
            }
            // fall through
          case 296: break;
          case 118:
            { throw new ScannerException(file, ErrorMessages.NOT_A_WARNING_ID, yyline);
            }
            // fall through
          case 297: break;
          case 119:
            { isYYEOF = true;
            }
            // fall through
          case 298: break;
          case 120:
            { maybeWarnUnicodeMatch(4);
                return symbol(sym.CHAR, Integer.parseInt(yytext().substring(2,6), 16));
            }
            // fall through
          case 299: break;
          case 121:
            { maybeWarnUnicodeMatch(4);
                string.append( (char) Integer.parseInt(yytext().substring(2,6), 16));
            }
            // fall through
          case 300: break;
          case 122:
            { eofCode = conc(eofCode,string); yybegin(MACROS);
            }
            // fall through
          case 301: break;
          case 123:
            { isInteger = true;
                                if (eofVal == null)
                                  eofVal = "return 0;";
                                eofclose = true;
            }
            // fall through
          case 302: break;
          case 124:
            { columnCount = true;
            }
            // fall through
          case 303: break;
          case 125:
            { isPublic = true;
            }
            // fall through
          case 304: break;
          case 126:
            { tokenType = yytext().substring(6).trim();
            }
            // fall through
          case 305: break;
          case 127:
            { OptionUtils.enableWarning(yytext().substring(6).trim());
            }
            // fall through
          case 306: break;
          case 128:
            { throw new ScannerException(file,ErrorMessages.EOF_WO_ACTION);
            }
            // fall through
          case 307: break;
          case 129:
            { initCode = conc(initCode,string);    yybegin(MACROS);
            }
            // fall through
          case 308: break;
          case 130:
            { throw new ScannerException(file,ErrorMessages.NO_BUFFER_SIZE, yyline);
            }
            // fall through
          case 309: break;
          case 131:
            { className = yytext().substring(7).trim();
            }
            // fall through
          case 310: break;
          case 132:
            { throw new ScannerException(file,ErrorMessages.QUIL_CUPSYM, yyline);
            }
            // fall through
          case 311: break;
          case 133:
            { isIntWrap = true;
            }
            // fall through
          case 312: break;
          case 134:
            { notUnix = true;
            }
            // fall through
          case 313: break;
          case 135:
            { throw new ScannerException(file,ErrorMessages.QUIL_THROW, yyline);
            }
            // fall through
          case 314: break;
          case 136:
            { String v = yytext().substring(8).trim();
                                       initCharClasses(CharSetSize.UNICODE, v);
            }
            // fall through
          case 315: break;
          case 137:
            { actionText.setLength(0); yybegin(JAVA_CODE);
                                   Symbol s = symbol_countUpdate(sym.EOFRULE, null);
                                   action_line = s.left+1;
                                   return s;
            }
            // fall through
          case 316: break;
          case 138:
            // lookahead expression with fixed lookahead length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, zzEndRead - zzStartRead, zzMarkedPos, -1);
            { yybegin(REGEXP); return symbol(sym.EOFRULE);
            }
            // fall through
          case 317: break;
          case 139:
            { maybeWarnUnicodeMatch(6);
                int codePoint = Integer.parseInt(yytext().substring(2,8), 16);
                if (codePoint <= getMaximumCodePoint()) {
                  return symbol(sym.CHAR, codePoint);
                } else {
                  throw new ScannerException(file,ErrorMessages.CODEPOINT_OUT_OF_RANGE, yyline, yycolumn+2);
                }
            }
            // fall through
          case 318: break;
          case 140:
            { maybeWarnUnicodeMatch(6);
                int codePoint = Integer.parseInt(yytext().substring(2,8), 16);
                if (codePoint <= getMaximumCodePoint()) {
                  string.append(Character.toChars(codePoint));
                } else {
                  throw new ScannerException(file,ErrorMessages.CODEPOINT_OUT_OF_RANGE, yyline, yycolumn+2);
                }
            }
            // fall through
          case 319: break;
          case 141:
            { isAbstract = true;
            }
            // fall through
          case 320: break;
          case 142:
            { bufferSize = Integer.parseInt(yytext().substring(8).trim());
            }
            // fall through
          case 321: break;
          case 143:
            { caseless = true;
            }
            // fall through
          case 322: break;
          case 144:
            { cupDebug = true;
            }
            // fall through
          case 323: break;
          case 145:
            { cupSymbol = yytext().substring(8).trim();
                                if (cupCompatible) Out.warning(ErrorMessages.CUPSYM_AFTER_CUP, yyline);
            }
            // fall through
          case 324: break;
          case 146:
            { eofclose = true;
            }
            // fall through
          case 325: break;
          case 147:
            { includeFile(yytext().substring(9).trim());
            }
            // fall through
          case 326: break;
          case 148:
            { lexThrow.add(yytext().substring(8).trim());
            }
            // fall through
          case 327: break;
          case 149:
            { OptionUtils.enableAllWarnings();
            }
            // fall through
          case 328: break;
          case 150:
            { includeFile(yytext().trim().substring(9).trim());
            }
            // fall through
          case 329: break;
          case 151:
            { actionText.setLength(0);
                            yybegin(JAVA_CODE);
                            action_line = yyline+1;
                            return symbol(sym.EOFRULE);
            }
            // fall through
          case 330: break;
          case 152:
            { eofVal = string.toString(); yybegin(MACROS);
            }
            // fall through
          case 331: break;
          case 153:
            { throw new ScannerException(file,ErrorMessages.QUIL_EOFTHROW, yyline);
            }
            // fall through
          case 332: break;
          case 154:
            { isExtending = yytext().substring(9).trim();
            }
            // fall through
          case 333: break;
          case 155:
            { OptionUtils.suppressWarning(yytext().substring(9).trim());
            }
            // fall through
          case 334: break;
          case 156:
            { return symbol(sym.LETTERCLASS);
            }
            // fall through
          case 335: break;
          case 157:
            { visibility = "private"; Skeleton.makePrivate();
            }
            // fall through
          case 336: break;
          case 158:
            { yybegin(CTOR_ARG); ctorTypes.add(yytext().substring(8).trim());
            }
            // fall through
          case 337: break;
          case 159:
            { eofThrow = concExc(eofThrow,yytext().substring(10).trim());
            }
            // fall through
          case 338: break;
          case 160:
            { functionName = yytext().substring(10).trim();
            }
            // fall through
          case 339: break;
          case 161:
            { throw new ScannerException(file,ErrorMessages.QUIL_INITTHROW, yyline);
            }
            // fall through
          case 340: break;
          case 162:
            { throw new ScannerException(file,ErrorMessages.QUIL_SCANERROR, yyline);
            }
            // fall through
          case 341: break;
          case 163:
            { standalone = true; isInteger = true;
            }
            // fall through
          case 342: break;
          case 164:
            { OptionUtils.suppressWarning(yytext().substring(10).trim());
            }
            // fall through
          case 343: break;
          case 165:
            { return symbol(sym.JLETTERCLASS);
            }
            // fall through
          case 344: break;
          case 166:
            { eofThrow = concExc(eofThrow,string); yybegin(MACROS);
            }
            // fall through
          case 345: break;
          case 167:
            { isImplementing = concExc(isImplementing, yytext().substring(12).trim());
            }
            // fall through
          case 346: break;
          case 168:
            { initThrow = concExc(initThrow,yytext().substring(11).trim());
            }
            // fall through
          case 347: break;
          case 169:
            { OptionUtils.suppressAllWarnings();
            }
            // fall through
          case 348: break;
          case 170:
            { scanErrorException = yytext().substring(11).trim();
            }
            // fall through
          case 349: break;
          case 171:
            { throw new ScannerException(file,ErrorMessages.QUIL_YYLEXTHROW, yyline);
            }
            // fall through
          case 350: break;
          case 172:
            { initThrow = concExc(initThrow,string);  yybegin(MACROS);
            }
            // fall through
          case 351: break;
          case 173:
            { lexThrow.add(yytext().substring(12).trim());
            }
            // fall through
          case 352: break;
          case 174:
            { return symbol(sym.LOWERCLASS);
            }
            // fall through
          case 353: break;
          case 175:
            { return symbol(sym.UPPERCLASS);
            }
            // fall through
          case 354: break;
          case 176:
            { lexThrow.add(string.toString()); yybegin(MACROS);
            }
            // fall through
          case 355: break;
          case 177:
            { eofclose = false;
            }
            // fall through
          case 356: break;
          case 178:
            { return symbol(sym.JLETTERDIGITCLASS);
            }
            // fall through
          case 357: break;
          case 179:
            { noSuppressWarnings = true;
            }
            // fall through
          case 358: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }

  /**
   * Converts an int token code into the name of the
   * token by reflection on the cup symbol class/interface sym
   */
  private static String getTokenName(int token) {
    try {
      java.lang.reflect.Field [] classFields = sym.class.getFields();
      for (int i = 0; i < classFields.length; i++) {
        if (classFields[i].getInt(null) == token) {
          return classFields[i].getName();
        }
      }
    } catch (Exception e) {
      e.printStackTrace(System.err);
    }

    return "UNKNOWN TOKEN";
  }

  /**
   * Same as next_token but also prints the token to standard out
   * for debugging.
   */
  public Symbol debug_next_token() throws java.io.IOException {
    Symbol s = next_token();
    System.out.println( "line:" + (yyline+1) + " col:" + (yycolumn+1) + " --"+ yytext() + "--" + getTokenName(s.sym) + "--");
    return s;
  }

  /**
   * Runs the scanner on input files.
   *
   * This main method is the debugging routine for the scanner.
   * It prints debugging information about each returned token to
   * System.out until the end of file is reached, or an error occured.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String[] argv) {
    if (argv.length == 0) {
      System.out.println("Usage : java LexScan [ --encoding <name> ] <inputfile(s)>");
    }
    else {
      int firstFilePos = 0;
      String encodingName = "UTF-8";
      if (argv[0].equals("--encoding")) {
        firstFilePos = 2;
        encodingName = argv[1];
        try {
          // Side-effect: is encodingName valid?
          java.nio.charset.Charset.forName(encodingName);
        } catch (Exception e) {
          System.out.println("Invalid encoding '" + encodingName + "'");
          return;
        }
      }
      for (int i = firstFilePos; i < argv.length; i++) {
        LexScan scanner = null;
        try {
          java.io.FileInputStream stream = new java.io.FileInputStream(argv[i]);
          java.io.Reader reader = new java.io.InputStreamReader(stream, encodingName);
          scanner = new LexScan(reader);
          while ( !scanner.zzAtEOF ) scanner.debug_next_token();
        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
      }
    }
  }


}
